// Code generated by gen.go; DO NOT EDIT.

package opslevel

// AlertSourceStatusTypeEnum represents the monitor status level.
type AlertSourceStatusTypeEnum string

const (
	AlertSourceStatusTypeEnumAlert        AlertSourceStatusTypeEnum = "alert"         // Monitor is reporting an alert.
	AlertSourceStatusTypeEnumWarn         AlertSourceStatusTypeEnum = "warn"          // Monitor is reporting a warning.
	AlertSourceStatusTypeEnumOk           AlertSourceStatusTypeEnum = "ok"            // Monitor is not reporting any warnings or alerts.
	AlertSourceStatusTypeEnumNoData       AlertSourceStatusTypeEnum = "no_data"       // No data received yet. Ensure your monitors are configured correctly.
	AlertSourceStatusTypeEnumFetchingData AlertSourceStatusTypeEnum = "fetching_data" // Monitor currently being updated.
)

// All AlertSourceStatusTypeEnum as []string
var AllAlertSourceStatusTypeEnum = []string{
	string(AlertSourceStatusTypeEnumAlert),
	string(AlertSourceStatusTypeEnumWarn),
	string(AlertSourceStatusTypeEnumOk),
	string(AlertSourceStatusTypeEnumNoData),
	string(AlertSourceStatusTypeEnumFetchingData),
}

// AlertSourceTypeEnum represents the type of the alert source.
type AlertSourceTypeEnum string

const (
	AlertSourceTypeEnumPagerduty AlertSourceTypeEnum = "pagerduty" // A PagerDuty alert source (aka service).
	AlertSourceTypeEnumDatadog   AlertSourceTypeEnum = "datadog"   // A Datadog alert source (aka monitor).
	AlertSourceTypeEnumOpsgenie  AlertSourceTypeEnum = "opsgenie"  // An Opsgenie alert source (aka service).
	AlertSourceTypeEnumNewRelic  AlertSourceTypeEnum = "new_relic" // A New Relic alert source (aka service).
)

// All AlertSourceTypeEnum as []string
var AllAlertSourceTypeEnum = []string{
	string(AlertSourceTypeEnumPagerduty),
	string(AlertSourceTypeEnumDatadog),
	string(AlertSourceTypeEnumOpsgenie),
	string(AlertSourceTypeEnumNewRelic),
}

// AliasOwnerTypeEnum represents the owner type an alias is assigned to.
type AliasOwnerTypeEnum string

const (
	AliasOwnerTypeEnumService                AliasOwnerTypeEnum = "service"                 // Aliases that are assigned to services.
	AliasOwnerTypeEnumTeam                   AliasOwnerTypeEnum = "team"                    // Aliases that are assigned to teams.
	AliasOwnerTypeEnumGroup                  AliasOwnerTypeEnum = "group"                   // Aliases that are assigned to groups.
	AliasOwnerTypeEnumSystem                 AliasOwnerTypeEnum = "system"                  // Aliases that are assigned to systems.
	AliasOwnerTypeEnumDomain                 AliasOwnerTypeEnum = "domain"                  // Aliases that are assigned to domains.
	AliasOwnerTypeEnumInfrastructureResource AliasOwnerTypeEnum = "infrastructure_resource" // Aliases that are assigned to infrastructure resources.
	AliasOwnerTypeEnumScorecard              AliasOwnerTypeEnum = "scorecard"               // Aliases that are assigned to scorecards.
)

// All AliasOwnerTypeEnum as []string
var AllAliasOwnerTypeEnum = []string{
	string(AliasOwnerTypeEnumService),
	string(AliasOwnerTypeEnumTeam),
	string(AliasOwnerTypeEnumGroup),
	string(AliasOwnerTypeEnumSystem),
	string(AliasOwnerTypeEnumDomain),
	string(AliasOwnerTypeEnumInfrastructureResource),
	string(AliasOwnerTypeEnumScorecard),
}

// ApiDocumentSourceEnum represents the source used to determine the preferred API document.
type ApiDocumentSourceEnum string

const (
	ApiDocumentSourceEnumPush ApiDocumentSourceEnum = "PUSH" // Use the document that was pushed to OpsLevel via an API Docs integration.
	ApiDocumentSourceEnumPull ApiDocumentSourceEnum = "PULL" // Use the document that was pulled by OpsLevel via a repo.
)

// All ApiDocumentSourceEnum as []string
var AllApiDocumentSourceEnum = []string{
	string(ApiDocumentSourceEnumPush),
	string(ApiDocumentSourceEnumPull),
}

// BasicTypeEnum represents operations that can be used on filters.
type BasicTypeEnum string

const (
	BasicTypeEnumEquals       BasicTypeEnum = "equals"         // Equals a specific value.
	BasicTypeEnumDoesNotEqual BasicTypeEnum = "does_not_equal" // Does not equal a specific value.
)

// All BasicTypeEnum as []string
var AllBasicTypeEnum = []string{
	string(BasicTypeEnumEquals),
	string(BasicTypeEnumDoesNotEqual),
}

// CampaignFilterEnum represents fields that can be used as part of filter for campaigns.
type CampaignFilterEnum string

const (
	CampaignFilterEnumID     CampaignFilterEnum = "id"     // Filter by `id` of campaign.
	CampaignFilterEnumOwner  CampaignFilterEnum = "owner"  // Filter by campaign owner.
	CampaignFilterEnumStatus CampaignFilterEnum = "status" // Filter by campaign status.
)

// All CampaignFilterEnum as []string
var AllCampaignFilterEnum = []string{
	string(CampaignFilterEnumID),
	string(CampaignFilterEnumOwner),
	string(CampaignFilterEnumStatus),
}

// CampaignReminderChannelEnum represents the possible communication channels through which a campaign reminder can be delivered.
type CampaignReminderChannelEnum string

const (
	CampaignReminderChannelEnumSlack CampaignReminderChannelEnum = "slack" // A cloud-based team communication platform developed by Slack Technologies.
	CampaignReminderChannelEnumEmail CampaignReminderChannelEnum = "email" // A system for sending messages to one or more recipients via telecommunications links between computers using dedicated software or a web-based service.
)

// All CampaignReminderChannelEnum as []string
var AllCampaignReminderChannelEnum = []string{
	string(CampaignReminderChannelEnumSlack),
	string(CampaignReminderChannelEnumEmail),
}

// CampaignReminderFrequencyUnitEnum represents possible time units for the frequency at which campaign reminders are delivered.
type CampaignReminderFrequencyUnitEnum string

const (
	CampaignReminderFrequencyUnitEnumDay   CampaignReminderFrequencyUnitEnum = "day"   // A period of twenty-four hours as a unit of time, reckoned from one midnight to the next, corresponding to a rotation of the earth on its axis.
	CampaignReminderFrequencyUnitEnumWeek  CampaignReminderFrequencyUnitEnum = "week"  // A period of seven days.
	CampaignReminderFrequencyUnitEnumMonth CampaignReminderFrequencyUnitEnum = "month" // Each of the twelve named periods into which a year is divided.
)

// All CampaignReminderFrequencyUnitEnum as []string
var AllCampaignReminderFrequencyUnitEnum = []string{
	string(CampaignReminderFrequencyUnitEnumDay),
	string(CampaignReminderFrequencyUnitEnumWeek),
	string(CampaignReminderFrequencyUnitEnumMonth),
}

// CampaignReminderTypeEnum represents type/Format of the notification.
type CampaignReminderTypeEnum string

const (
	CampaignReminderTypeEnumEmail CampaignReminderTypeEnum = "email" // Notification will be sent via email.
	CampaignReminderTypeEnumSlack CampaignReminderTypeEnum = "slack" // Notification will be sent by slack.
)

// All CampaignReminderTypeEnum as []string
var AllCampaignReminderTypeEnum = []string{
	string(CampaignReminderTypeEnumEmail),
	string(CampaignReminderTypeEnumSlack),
}

// CampaignServiceStatusEnum represents status of whether a service is passing all checks for a campaign or not.
type CampaignServiceStatusEnum string

const (
	CampaignServiceStatusEnumPassing CampaignServiceStatusEnum = "passing" // Service is passing all the checks in the campaign.
	CampaignServiceStatusEnumFailing CampaignServiceStatusEnum = "failing" // Service is failing one or more checks in the campaign.
)

// All CampaignServiceStatusEnum as []string
var AllCampaignServiceStatusEnum = []string{
	string(CampaignServiceStatusEnumPassing),
	string(CampaignServiceStatusEnumFailing),
}

// CampaignSortEnum represents sort possibilities for campaigns.
type CampaignSortEnum string

const (
	CampaignSortEnumNameAsc              CampaignSortEnum = "name_ASC"               // Sort by `name` ascending.
	CampaignSortEnumNameDesc             CampaignSortEnum = "name_DESC"              // Sort by `name` descending.
	CampaignSortEnumOwnerAsc             CampaignSortEnum = "owner_ASC"              // Sort by `owner` ascending.
	CampaignSortEnumOwnerDesc            CampaignSortEnum = "owner_DESC"             // Sort by `owner` descending.
	CampaignSortEnumFilterAsc            CampaignSortEnum = "filter_ASC"             // Sort by `filter` ascending.
	CampaignSortEnumFilterDesc           CampaignSortEnum = "filter_DESC"            // Sort by `filter` descending.
	CampaignSortEnumStartDateAsc         CampaignSortEnum = "start_date_ASC"         // Sort by `startDate` ascending.
	CampaignSortEnumStartDateDesc        CampaignSortEnum = "start_date_DESC"        // Sort by `startDate` descending.
	CampaignSortEnumTargetDateAsc        CampaignSortEnum = "target_date_ASC"        // Sort by `targetDate` ascending.
	CampaignSortEnumTargetDateDesc       CampaignSortEnum = "target_date_DESC"       // Sort by `targetDate` descending.
	CampaignSortEnumEndedDateAsc         CampaignSortEnum = "ended_date_ASC"         // Sort by `endedDate` ascending.
	CampaignSortEnumEndedDateDesc        CampaignSortEnum = "ended_date_DESC"        // Sort by `endedDate` descending.
	CampaignSortEnumStatusAsc            CampaignSortEnum = "status_ASC"             // Sort by `status` ascending.
	CampaignSortEnumStatusDesc           CampaignSortEnum = "status_DESC"            // Sort by `status` descending.
	CampaignSortEnumServicesCompleteAsc  CampaignSortEnum = "services_complete_ASC"  // Sort by number of `services complete` ascending.
	CampaignSortEnumServicesCompleteDesc CampaignSortEnum = "services_complete_DESC" // Sort by number of `services complete` descending.
	CampaignSortEnumChecksPassingAsc     CampaignSortEnum = "checks_passing_ASC"     // Sort by number of `checks passing` ascending.
	CampaignSortEnumChecksPassingDesc    CampaignSortEnum = "checks_passing_DESC"    // Sort by number of `checks passing` descending.
)

// All CampaignSortEnum as []string
var AllCampaignSortEnum = []string{
	string(CampaignSortEnumNameAsc),
	string(CampaignSortEnumNameDesc),
	string(CampaignSortEnumOwnerAsc),
	string(CampaignSortEnumOwnerDesc),
	string(CampaignSortEnumFilterAsc),
	string(CampaignSortEnumFilterDesc),
	string(CampaignSortEnumStartDateAsc),
	string(CampaignSortEnumStartDateDesc),
	string(CampaignSortEnumTargetDateAsc),
	string(CampaignSortEnumTargetDateDesc),
	string(CampaignSortEnumEndedDateAsc),
	string(CampaignSortEnumEndedDateDesc),
	string(CampaignSortEnumStatusAsc),
	string(CampaignSortEnumStatusDesc),
	string(CampaignSortEnumServicesCompleteAsc),
	string(CampaignSortEnumServicesCompleteDesc),
	string(CampaignSortEnumChecksPassingAsc),
	string(CampaignSortEnumChecksPassingDesc),
}

// CampaignStatusEnum represents the campaign status.
type CampaignStatusEnum string

const (
	CampaignStatusEnumDraft      CampaignStatusEnum = "draft"       // Campaign has been created but is not yet active.
	CampaignStatusEnumScheduled  CampaignStatusEnum = "scheduled"   // Campaign has been scheduled to begin in the future.
	CampaignStatusEnumInProgress CampaignStatusEnum = "in_progress" // Campaign is in progress.
	CampaignStatusEnumDelayed    CampaignStatusEnum = "delayed"     // Campaign is delayed.
	CampaignStatusEnumEnded      CampaignStatusEnum = "ended"       // Campaign ended.
)

// All CampaignStatusEnum as []string
var AllCampaignStatusEnum = []string{
	string(CampaignStatusEnumDraft),
	string(CampaignStatusEnumScheduled),
	string(CampaignStatusEnumInProgress),
	string(CampaignStatusEnumDelayed),
	string(CampaignStatusEnumEnded),
}

// CheckStatus represents the evaluation status of the check.
type CheckStatus string

const (
	CheckStatusPassed  CheckStatus = "passed"  // The check evaluated to a truthy value based on some conditions.
	CheckStatusFailed  CheckStatus = "failed"  // The check evaluated to a falsy value based on some conditions.
	CheckStatusPending CheckStatus = "pending" // The check has not been evaluated yet..
)

// All CheckStatus as []string
var AllCheckStatus = []string{
	string(CheckStatusPassed),
	string(CheckStatusFailed),
	string(CheckStatusPending),
}

// CheckType represents the type of check.
type CheckType string

const (
	CheckTypeHasOwner            CheckType = "has_owner"             // Verifies that the service has an owner defined.
	CheckTypeHasRecentDeploy     CheckType = "has_recent_deploy"     // Verified that the services has received a deploy within a specified number of days.
	CheckTypeServiceProperty     CheckType = "service_property"      // Verifies that a service property is set or matches a specified format.
	CheckTypeHasServiceConfig    CheckType = "has_service_config"    // Verifies that the service is maintained though the use of an opslevel.yml service config.
	CheckTypeHasDocumentation    CheckType = "has_documentation"     // Verifies that the service has visible documentation of a particular type and subtype.
	CheckTypeHasRepository       CheckType = "has_repository"        // Verifies that the service has a repository integrated.
	CheckTypeToolUsage           CheckType = "tool_usage"            // Verifies that the service is using a tool of a particular category or name.
	CheckTypeTagDefined          CheckType = "tag_defined"           // Verifies that the service has the specified tag defined.
	CheckTypeRepoFile            CheckType = "repo_file"             // Quickly scan the service’s repository for the existence or contents of a specific file.
	CheckTypeRepoSearch          CheckType = "repo_search"           // Quickly search the service’s repository for specific contents in any file.
	CheckTypeCustom              CheckType = "custom"                // Allows for the creation of programmatic checks that use an API to mark the status as passing or failing.
	CheckTypePayload             CheckType = "payload"               // Requires a payload integration api call to complete a check for the service.
	CheckTypeManual              CheckType = "manual"                // Requires a service owner to manually complete a check for the service.
	CheckTypeGeneric             CheckType = "generic"               // Requires a generic integration api call to complete a series of checks for multiple services.
	CheckTypeAlertSourceUsage    CheckType = "alert_source_usage"    // Verifies that the service has an alert source of a particular type or name.
	CheckTypeGitBranchProtection CheckType = "git_branch_protection" // Verifies that all the repositories on the service have branch protection enabled.
	CheckTypeServiceDependency   CheckType = "service_dependency"    // Verifies that the service has either a dependent or dependency.
	CheckTypeRepoGrep            CheckType = "repo_grep"             // Run a comprehensive search across the service's repository using advanced search parameters.
)

// All CheckType as []string
var AllCheckType = []string{
	string(CheckTypeHasOwner),
	string(CheckTypeHasRecentDeploy),
	string(CheckTypeServiceProperty),
	string(CheckTypeHasServiceConfig),
	string(CheckTypeHasDocumentation),
	string(CheckTypeHasRepository),
	string(CheckTypeToolUsage),
	string(CheckTypeTagDefined),
	string(CheckTypeRepoFile),
	string(CheckTypeRepoSearch),
	string(CheckTypeCustom),
	string(CheckTypePayload),
	string(CheckTypeManual),
	string(CheckTypeGeneric),
	string(CheckTypeAlertSourceUsage),
	string(CheckTypeGitBranchProtection),
	string(CheckTypeServiceDependency),
	string(CheckTypeRepoGrep),
}

// ConnectiveEnum represents the logical operator to be used in conjunction with multiple filters (requires filters to be supplied).
type ConnectiveEnum string

const (
	ConnectiveEnumAnd ConnectiveEnum = "and" // Used to ensure **all** filters match for a given resource.
	ConnectiveEnumOr  ConnectiveEnum = "or"  // Used to ensure **any** filters match for a given resource.
)

// All ConnectiveEnum as []string
var AllConnectiveEnum = []string{
	string(ConnectiveEnumAnd),
	string(ConnectiveEnumOr),
}

// ContactType represents the method of contact.
type ContactType string

const (
	ContactTypeSlack       ContactType = "slack"        // A Slack channel contact method.
	ContactTypeSlackHandle ContactType = "slack_handle" // A Slack handle contact method.
	ContactTypeEmail       ContactType = "email"        // An email contact method.
	ContactTypeWeb         ContactType = "web"          // A website contact method.
	ContactTypeGitHub      ContactType = "github"       // A GitHub handle.
)

// All ContactType as []string
var AllContactType = []string{
	string(ContactTypeSlack),
	string(ContactTypeSlackHandle),
	string(ContactTypeEmail),
	string(ContactTypeWeb),
	string(ContactTypeGitHub),
}

// CustomActionsEntityTypeEnum represents the entity types a custom action can be associated with.
type CustomActionsEntityTypeEnum string

const (
	CustomActionsEntityTypeEnumService CustomActionsEntityTypeEnum = "SERVICE" // A custom action associated with services.
	CustomActionsEntityTypeEnumGlobal  CustomActionsEntityTypeEnum = "GLOBAL"  // A custom action associated with the global scope (no particular entity type).
)

// All CustomActionsEntityTypeEnum as []string
var AllCustomActionsEntityTypeEnum = []string{
	string(CustomActionsEntityTypeEnumService),
	string(CustomActionsEntityTypeEnumGlobal),
}

// CustomActionsHttpMethodEnum represents an HTTP request method.
type CustomActionsHttpMethodEnum string

const (
	CustomActionsHttpMethodEnumGet    CustomActionsHttpMethodEnum = "GET"    // An HTTP GET request.
	CustomActionsHttpMethodEnumPatch  CustomActionsHttpMethodEnum = "PATCH"  // An HTTP PATCH request.
	CustomActionsHttpMethodEnumPost   CustomActionsHttpMethodEnum = "POST"   // An HTTP POST request.
	CustomActionsHttpMethodEnumPut    CustomActionsHttpMethodEnum = "PUT"    // An HTTP PUT request.
	CustomActionsHttpMethodEnumDelete CustomActionsHttpMethodEnum = "DELETE" // An HTTP DELETE request.
)

// All CustomActionsHttpMethodEnum as []string
var AllCustomActionsHttpMethodEnum = []string{
	string(CustomActionsHttpMethodEnumGet),
	string(CustomActionsHttpMethodEnumPatch),
	string(CustomActionsHttpMethodEnumPost),
	string(CustomActionsHttpMethodEnumPut),
	string(CustomActionsHttpMethodEnumDelete),
}

// CustomActionsTriggerDefinitionAccessControlEnum represents who can see and use the trigger definition.
type CustomActionsTriggerDefinitionAccessControlEnum string

const (
	CustomActionsTriggerDefinitionAccessControlEnumEveryone      CustomActionsTriggerDefinitionAccessControlEnum = "everyone"       // All users of OpsLevel.
	CustomActionsTriggerDefinitionAccessControlEnumAdmins        CustomActionsTriggerDefinitionAccessControlEnum = "admins"         // Admin users.
	CustomActionsTriggerDefinitionAccessControlEnumServiceOwners CustomActionsTriggerDefinitionAccessControlEnum = "service_owners" // The owners of a service.
)

// All CustomActionsTriggerDefinitionAccessControlEnum as []string
var AllCustomActionsTriggerDefinitionAccessControlEnum = []string{
	string(CustomActionsTriggerDefinitionAccessControlEnumEveryone),
	string(CustomActionsTriggerDefinitionAccessControlEnumAdmins),
	string(CustomActionsTriggerDefinitionAccessControlEnumServiceOwners),
}

// CustomActionsTriggerEventStatusEnum represents the status of the custom action trigger event.
type CustomActionsTriggerEventStatusEnum string

const (
	CustomActionsTriggerEventStatusEnumPending CustomActionsTriggerEventStatusEnum = "PENDING" // A result has not been determined.
	CustomActionsTriggerEventStatusEnumSuccess CustomActionsTriggerEventStatusEnum = "SUCCESS" // The action completed succesfully.
	CustomActionsTriggerEventStatusEnumFailure CustomActionsTriggerEventStatusEnum = "FAILURE" // The action failed to complete.
)

// All CustomActionsTriggerEventStatusEnum as []string
var AllCustomActionsTriggerEventStatusEnum = []string{
	string(CustomActionsTriggerEventStatusEnumPending),
	string(CustomActionsTriggerEventStatusEnumSuccess),
	string(CustomActionsTriggerEventStatusEnumFailure),
}

// DayOfWeekEnum represents possible days of the week.
type DayOfWeekEnum string

const (
	DayOfWeekEnumMonday    DayOfWeekEnum = "monday"    // Monday is the day of the week that takes place between Sunday and Tuesday.
	DayOfWeekEnumTuesday   DayOfWeekEnum = "tuesday"   // Tuesday is the day of the week between Monday and Wednesday.
	DayOfWeekEnumWednesday DayOfWeekEnum = "wednesday" // The day of the week before Thursday and following Tuesday.
	DayOfWeekEnumThursday  DayOfWeekEnum = "thursday"  // The day of the week before Friday and following Wednesday.
	DayOfWeekEnumFriday    DayOfWeekEnum = "friday"    // Yesterday was Thursday. Tomorrow is Saturday. We so excited.
	DayOfWeekEnumSaturday  DayOfWeekEnum = "saturday"  // The day of the week before Sunday and following Friday, and (together with Sunday) forming part of the weekend.
	DayOfWeekEnumSunday    DayOfWeekEnum = "sunday"    // The day of the week before Monday and following Saturday, (together with Saturday) forming part of the weekend.
)

// All DayOfWeekEnum as []string
var AllDayOfWeekEnum = []string{
	string(DayOfWeekEnumMonday),
	string(DayOfWeekEnumTuesday),
	string(DayOfWeekEnumWednesday),
	string(DayOfWeekEnumThursday),
	string(DayOfWeekEnumFriday),
	string(DayOfWeekEnumSaturday),
	string(DayOfWeekEnumSunday),
}

// FrequencyTimeScale represents the time scale type for the frequency.
type FrequencyTimeScale string

const (
	FrequencyTimeScaleDay   FrequencyTimeScale = "day"   // Consider the time scale of days.
	FrequencyTimeScaleWeek  FrequencyTimeScale = "week"  // Consider the time scale of weeks.
	FrequencyTimeScaleMonth FrequencyTimeScale = "month" // Consider the time scale of months.
	FrequencyTimeScaleYear  FrequencyTimeScale = "year"  // Consider the time scale of years.
)

// All FrequencyTimeScale as []string
var AllFrequencyTimeScale = []string{
	string(FrequencyTimeScaleDay),
	string(FrequencyTimeScaleWeek),
	string(FrequencyTimeScaleMonth),
	string(FrequencyTimeScaleYear),
}

// HasDocumentationSubtypeEnum represents the subtype of the document.
type HasDocumentationSubtypeEnum string

const (
	HasDocumentationSubtypeEnumOpenapi HasDocumentationSubtypeEnum = "openapi" // Document is an OpenAPI document.
)

// All HasDocumentationSubtypeEnum as []string
var AllHasDocumentationSubtypeEnum = []string{
	string(HasDocumentationSubtypeEnumOpenapi),
}

// HasDocumentationTypeEnum represents the type of the document.
type HasDocumentationTypeEnum string

const (
	HasDocumentationTypeEnumTech HasDocumentationTypeEnum = "tech" // Document is an Tech document.
	HasDocumentationTypeEnumAPI  HasDocumentationTypeEnum = "api"  // Document is an API document.
)

// All HasDocumentationTypeEnum as []string
var AllHasDocumentationTypeEnum = []string{
	string(HasDocumentationTypeEnumTech),
	string(HasDocumentationTypeEnumAPI),
}

// PayloadSortEnum represents sort possibilities for payloads.
type PayloadSortEnum string

const (
	PayloadSortEnumCreatedAtAsc    PayloadSortEnum = "created_at_ASC"    // Order by `created_at` ascending.
	PayloadSortEnumCreatedAtDesc   PayloadSortEnum = "created_at_DESC"   // Order by `created_at` descending.
	PayloadSortEnumProcessedAtAsc  PayloadSortEnum = "processed_at_ASC"  // Order by `processed_at` ascending.
	PayloadSortEnumProcessedAtDesc PayloadSortEnum = "processed_at_DESC" // Order by `processed_at` descending.
)

// All PayloadSortEnum as []string
var AllPayloadSortEnum = []string{
	string(PayloadSortEnumCreatedAtAsc),
	string(PayloadSortEnumCreatedAtDesc),
	string(PayloadSortEnumProcessedAtAsc),
	string(PayloadSortEnumProcessedAtDesc),
}

// PredicateKeyEnum represents fields that can be used as part of filter for services.
type PredicateKeyEnum string

const (
	PredicateKeyEnumTierIndex      PredicateKeyEnum = "tier_index"      // Filter by `tier` field.
	PredicateKeyEnumLifecycleIndex PredicateKeyEnum = "lifecycle_index" // Filter by `lifecycle` field.
	PredicateKeyEnumLanguage       PredicateKeyEnum = "language"        // Filter by `language` field.
	PredicateKeyEnumFramework      PredicateKeyEnum = "framework"       // Filter by `framework` field.
	PredicateKeyEnumProduct        PredicateKeyEnum = "product"         // Filter by `product` field.
	PredicateKeyEnumName           PredicateKeyEnum = "name"            // Filter by `name` field.
	PredicateKeyEnumTags           PredicateKeyEnum = "tags"            // Filter by `tags` field.
	PredicateKeyEnumOwnerID        PredicateKeyEnum = "owner_id"        // Filter by `owner` field.
	PredicateKeyEnumGroupIDs       PredicateKeyEnum = "group_ids"       // Filter by group hierarchy. Will return resources who's owner is in the group ancestry chain.
	PredicateKeyEnumOwnerIDs       PredicateKeyEnum = "owner_ids"       // Filter by `owner` hierarchy. Will return resources who's owner is in the team ancestry chain.
	PredicateKeyEnumCreationSource PredicateKeyEnum = "creation_source" // Filter by the creation source.
	PredicateKeyEnumRepositoryIDs  PredicateKeyEnum = "repository_ids"  // Filter by Repository that this service is attached to, if any.
	PredicateKeyEnumFilterID       PredicateKeyEnum = "filter_id"       // Filter by another filter.
	PredicateKeyEnumAliases        PredicateKeyEnum = "aliases"         // Filter by Alias attached to this service, if any.
	PredicateKeyEnumDomainID       PredicateKeyEnum = "domain_id"       // Filter by Domain that includes the System this service is assigned to, if any.
	PredicateKeyEnumSystemID       PredicateKeyEnum = "system_id"       // Filter by System that this service is assigned to, if any.
	PredicateKeyEnumProperties     PredicateKeyEnum = "properties"      // Filter by custom-defined properties.
)

// All PredicateKeyEnum as []string
var AllPredicateKeyEnum = []string{
	string(PredicateKeyEnumTierIndex),
	string(PredicateKeyEnumLifecycleIndex),
	string(PredicateKeyEnumLanguage),
	string(PredicateKeyEnumFramework),
	string(PredicateKeyEnumProduct),
	string(PredicateKeyEnumName),
	string(PredicateKeyEnumTags),
	string(PredicateKeyEnumOwnerID),
	string(PredicateKeyEnumGroupIDs),
	string(PredicateKeyEnumOwnerIDs),
	string(PredicateKeyEnumCreationSource),
	string(PredicateKeyEnumRepositoryIDs),
	string(PredicateKeyEnumFilterID),
	string(PredicateKeyEnumAliases),
	string(PredicateKeyEnumDomainID),
	string(PredicateKeyEnumSystemID),
	string(PredicateKeyEnumProperties),
}

// PredicateTypeEnum represents operations that can be used on predicates.
type PredicateTypeEnum string

const (
	PredicateTypeEnumContains                   PredicateTypeEnum = "contains"                     // Contains a specific value.
	PredicateTypeEnumDoesNotContain             PredicateTypeEnum = "does_not_contain"             // Does not contain a specific value.
	PredicateTypeEnumDoesNotEqual               PredicateTypeEnum = "does_not_equal"               // Does not equal a specific value.
	PredicateTypeEnumDoesNotExist               PredicateTypeEnum = "does_not_exist"               // Specific attribute does not exist.
	PredicateTypeEnumEndsWith                   PredicateTypeEnum = "ends_with"                    // Ends with a specific value.
	PredicateTypeEnumEquals                     PredicateTypeEnum = "equals"                       // Equals a specific value.
	PredicateTypeEnumExists                     PredicateTypeEnum = "exists"                       // Specific attribute exists.
	PredicateTypeEnumGreaterThanOrEqualTo       PredicateTypeEnum = "greater_than_or_equal_to"     // Greater than or equal to a specific value (numeric only).
	PredicateTypeEnumLessThanOrEqualTo          PredicateTypeEnum = "less_than_or_equal_to"        // Less than or equal to a specific value (numeric only).
	PredicateTypeEnumStartsWith                 PredicateTypeEnum = "starts_with"                  // Starts with a specific value.
	PredicateTypeEnumSatisfiesVersionConstraint PredicateTypeEnum = "satisfies_version_constraint" // Satisfies version constraint (tag value only).
	PredicateTypeEnumMatchesRegex               PredicateTypeEnum = "matches_regex"                // Matches a value using a regular expression.
	PredicateTypeEnumDoesNotMatchRegex          PredicateTypeEnum = "does_not_match_regex"         // Does not match a value using a regular expression.
	PredicateTypeEnumBelongsTo                  PredicateTypeEnum = "belongs_to"                   // Belongs to a group's hierarchy.
	PredicateTypeEnumMatches                    PredicateTypeEnum = "matches"                      // A certain filter is matched.
	PredicateTypeEnumDoesNotMatch               PredicateTypeEnum = "does_not_match"               // A certain filter is not matched.
	PredicateTypeEnumSatisfiesJqExpression      PredicateTypeEnum = "satisfies_jq_expression"      // Satisfies an expression defined in jq.
)

// All PredicateTypeEnum as []string
var AllPredicateTypeEnum = []string{
	string(PredicateTypeEnumContains),
	string(PredicateTypeEnumDoesNotContain),
	string(PredicateTypeEnumDoesNotEqual),
	string(PredicateTypeEnumDoesNotExist),
	string(PredicateTypeEnumEndsWith),
	string(PredicateTypeEnumEquals),
	string(PredicateTypeEnumExists),
	string(PredicateTypeEnumGreaterThanOrEqualTo),
	string(PredicateTypeEnumLessThanOrEqualTo),
	string(PredicateTypeEnumStartsWith),
	string(PredicateTypeEnumSatisfiesVersionConstraint),
	string(PredicateTypeEnumMatchesRegex),
	string(PredicateTypeEnumDoesNotMatchRegex),
	string(PredicateTypeEnumBelongsTo),
	string(PredicateTypeEnumMatches),
	string(PredicateTypeEnumDoesNotMatch),
	string(PredicateTypeEnumSatisfiesJqExpression),
}

// PropertyDefinitionDisplayTypeEnum represents the set of possible display types of a property definition schema.
type PropertyDefinitionDisplayTypeEnum string

const (
	PropertyDefinitionDisplayTypeEnumArray    PropertyDefinitionDisplayTypeEnum = "ARRAY"    // An array.
	PropertyDefinitionDisplayTypeEnumBoolean  PropertyDefinitionDisplayTypeEnum = "BOOLEAN"  // A boolean.
	PropertyDefinitionDisplayTypeEnumDropdown PropertyDefinitionDisplayTypeEnum = "DROPDOWN" // A dropdown.
	PropertyDefinitionDisplayTypeEnumNumber   PropertyDefinitionDisplayTypeEnum = "NUMBER"   // A number.
	PropertyDefinitionDisplayTypeEnumObject   PropertyDefinitionDisplayTypeEnum = "OBJECT"   // An object.
	PropertyDefinitionDisplayTypeEnumText     PropertyDefinitionDisplayTypeEnum = "TEXT"     // A text string.
)

// All PropertyDefinitionDisplayTypeEnum as []string
var AllPropertyDefinitionDisplayTypeEnum = []string{
	string(PropertyDefinitionDisplayTypeEnumArray),
	string(PropertyDefinitionDisplayTypeEnumBoolean),
	string(PropertyDefinitionDisplayTypeEnumDropdown),
	string(PropertyDefinitionDisplayTypeEnumNumber),
	string(PropertyDefinitionDisplayTypeEnumObject),
	string(PropertyDefinitionDisplayTypeEnumText),
}

// PropertyDisplayStatusEnum represents the display status of a custom property on service pages.
type PropertyDisplayStatusEnum string

const (
	PropertyDisplayStatusEnumHidden  PropertyDisplayStatusEnum = "hidden"  // The property is not shown on the service page.
	PropertyDisplayStatusEnumVisible PropertyDisplayStatusEnum = "visible" // The property is shown on the service page.
)

// All PropertyDisplayStatusEnum as []string
var AllPropertyDisplayStatusEnum = []string{
	string(PropertyDisplayStatusEnumHidden),
	string(PropertyDisplayStatusEnumVisible),
}

// RelatedResourceRelationshipTypeEnum represents the type of the relationship between two resources.
type RelatedResourceRelationshipTypeEnum string

const (
	RelatedResourceRelationshipTypeEnumBelongsTo    RelatedResourceRelationshipTypeEnum = "belongs_to"    // The resource belongs to the node on the edge.
	RelatedResourceRelationshipTypeEnumContains     RelatedResourceRelationshipTypeEnum = "contains"      // The resource contains the node on the edge.
	RelatedResourceRelationshipTypeEnumDependsOn    RelatedResourceRelationshipTypeEnum = "depends_on"    // The resource depends on the node on the edge.
	RelatedResourceRelationshipTypeEnumDependencyOf RelatedResourceRelationshipTypeEnum = "dependency_of" // The resource is a dependency of the node on the edge.
)

// All RelatedResourceRelationshipTypeEnum as []string
var AllRelatedResourceRelationshipTypeEnum = []string{
	string(RelatedResourceRelationshipTypeEnumBelongsTo),
	string(RelatedResourceRelationshipTypeEnumContains),
	string(RelatedResourceRelationshipTypeEnumDependsOn),
	string(RelatedResourceRelationshipTypeEnumDependencyOf),
}

// RelationshipTypeEnum represents the type of relationship between two resources.
type RelationshipTypeEnum string

const (
	RelationshipTypeEnumBelongsTo RelationshipTypeEnum = "belongs_to" // The source resource belongs to the target resource.
	RelationshipTypeEnumDependsOn RelationshipTypeEnum = "depends_on" // The source resource depends on the target resource.
)

// All RelationshipTypeEnum as []string
var AllRelationshipTypeEnum = []string{
	string(RelationshipTypeEnumBelongsTo),
	string(RelationshipTypeEnumDependsOn),
}

// RepositoryVisibilityEnum represents possible visibility levels for repositories.
type RepositoryVisibilityEnum string

const (
	RepositoryVisibilityEnumPrivate      RepositoryVisibilityEnum = "PRIVATE"      // Repositories that are private to the user.
	RepositoryVisibilityEnumInternal     RepositoryVisibilityEnum = "INTERNAL"     // Repositories that are only accessible to organization users (Github, Gitlab).
	RepositoryVisibilityEnumPublic       RepositoryVisibilityEnum = "PUBLIC"       // Repositories that are publically accessible.
	RepositoryVisibilityEnumOrganization RepositoryVisibilityEnum = "ORGANIZATION" // Repositories that are only accessible to organization users (ADO).
)

// All RepositoryVisibilityEnum as []string
var AllRepositoryVisibilityEnum = []string{
	string(RepositoryVisibilityEnumPrivate),
	string(RepositoryVisibilityEnumInternal),
	string(RepositoryVisibilityEnumPublic),
	string(RepositoryVisibilityEnumOrganization),
}

// ResourceDocumentStatusTypeEnum represents status of a document on a resource.
type ResourceDocumentStatusTypeEnum string

const (
	ResourceDocumentStatusTypeEnumPinned  ResourceDocumentStatusTypeEnum = "pinned"  // Document is pinned.
	ResourceDocumentStatusTypeEnumVisible ResourceDocumentStatusTypeEnum = "visible" // Document is visible.
	ResourceDocumentStatusTypeEnumHidden  ResourceDocumentStatusTypeEnum = "hidden"  // Document is hidden.
)

// All ResourceDocumentStatusTypeEnum as []string
var AllResourceDocumentStatusTypeEnum = []string{
	string(ResourceDocumentStatusTypeEnumPinned),
	string(ResourceDocumentStatusTypeEnumVisible),
	string(ResourceDocumentStatusTypeEnumHidden),
}

// ScorecardSortEnum represents the possible options to sort the resulting list of scorecards.
type ScorecardSortEnum string

const (
	ScorecardSortEnumNameAsc                         ScorecardSortEnum = "name_ASC"                         // Order by the scorecard's name, in ascending order.
	ScorecardSortEnumNameDesc                        ScorecardSortEnum = "name_DESC"                        // Order by the scorecard's name, in descending order.
	ScorecardSortEnumOwnerAsc                        ScorecardSortEnum = "owner_ASC"                        // Order by the scorecard owner's name, in ascending order.
	ScorecardSortEnumOwnerDesc                       ScorecardSortEnum = "owner_DESC"                       // Order by the scorecard owner's name, in descending order.
	ScorecardSortEnumFilterAsc                       ScorecardSortEnum = "filter_ASC"                       // Order by the associated filter's name, in ascending order.
	ScorecardSortEnumFilterDesc                      ScorecardSortEnum = "filter_DESC"                      // Order by the associated filter's name, in descending order.
	ScorecardSortEnumServicecountAsc                 ScorecardSortEnum = "serviceCount_ASC"                 // Order by the number of services covered by the scorecard, in ascending order.
	ScorecardSortEnumServicecountDesc                ScorecardSortEnum = "serviceCount_DESC"                // Order by the number of services covered by the scorecard, in descending order.
	ScorecardSortEnumPassingcheckfractionAsc         ScorecardSortEnum = "passingCheckFraction_ASC"         // Order by the fraction of passing checks on the scorecard, in ascending order.
	ScorecardSortEnumPassingcheckfractionDesc        ScorecardSortEnum = "passingCheckFraction_DESC"        // Order by the fraction of passing checks on the scorecard, in descending order.
	ScorecardSortEnumAffectsoverallservicelevelsAsc  ScorecardSortEnum = "affectsOverallServiceLevels_ASC"  // Order by whether or not the checks on the scorecard affect the overall maturity, in ascending order.
	ScorecardSortEnumAffectsoverallservicelevelsDesc ScorecardSortEnum = "affectsOverallServiceLevels_DESC" // Order by whether or not the checks on the scorecard affect the overall maturity, in descending order.
)

// All ScorecardSortEnum as []string
var AllScorecardSortEnum = []string{
	string(ScorecardSortEnumNameAsc),
	string(ScorecardSortEnumNameDesc),
	string(ScorecardSortEnumOwnerAsc),
	string(ScorecardSortEnumOwnerDesc),
	string(ScorecardSortEnumFilterAsc),
	string(ScorecardSortEnumFilterDesc),
	string(ScorecardSortEnumServicecountAsc),
	string(ScorecardSortEnumServicecountDesc),
	string(ScorecardSortEnumPassingcheckfractionAsc),
	string(ScorecardSortEnumPassingcheckfractionDesc),
	string(ScorecardSortEnumAffectsoverallservicelevelsAsc),
	string(ScorecardSortEnumAffectsoverallservicelevelsDesc),
}

// ServicePropertyTypeEnum represents properties of services that can be validated.
type ServicePropertyTypeEnum string

const (
	ServicePropertyTypeEnumDescription    ServicePropertyTypeEnum = "description"     // The description of a service.
	ServicePropertyTypeEnumName           ServicePropertyTypeEnum = "name"            // The name of a service.
	ServicePropertyTypeEnumLanguage       ServicePropertyTypeEnum = "language"        // The primary programming language of a service.
	ServicePropertyTypeEnumFramework      ServicePropertyTypeEnum = "framework"       // The primary software development framework of a service.
	ServicePropertyTypeEnumProduct        ServicePropertyTypeEnum = "product"         // The product that is associated with a service.
	ServicePropertyTypeEnumLifecycleIndex ServicePropertyTypeEnum = "lifecycle_index" // The index of the lifecycle a service belongs to.
	ServicePropertyTypeEnumTierIndex      ServicePropertyTypeEnum = "tier_index"      // The index of the tier a service belongs to.
	ServicePropertyTypeEnumNote           ServicePropertyTypeEnum = "note"            // Additional information about the service.
	ServicePropertyTypeEnumSystem         ServicePropertyTypeEnum = "system"          // The system that the service belongs to.
	ServicePropertyTypeEnumCustomProperty ServicePropertyTypeEnum = "custom_property" // A custom property that is associated with the service.
)

// All ServicePropertyTypeEnum as []string
var AllServicePropertyTypeEnum = []string{
	string(ServicePropertyTypeEnumDescription),
	string(ServicePropertyTypeEnumName),
	string(ServicePropertyTypeEnumLanguage),
	string(ServicePropertyTypeEnumFramework),
	string(ServicePropertyTypeEnumProduct),
	string(ServicePropertyTypeEnumLifecycleIndex),
	string(ServicePropertyTypeEnumTierIndex),
	string(ServicePropertyTypeEnumNote),
	string(ServicePropertyTypeEnumSystem),
	string(ServicePropertyTypeEnumCustomProperty),
}

// ServiceSortEnum represents sort possibilities for services.
type ServiceSortEnum string

const (
	ServiceSortEnumNameAsc           ServiceSortEnum = "name_ASC"            // Sort by `name` ascending.
	ServiceSortEnumNameDesc          ServiceSortEnum = "name_DESC"           // Sort by `name` descending.
	ServiceSortEnumProductAsc        ServiceSortEnum = "product_ASC"         // Sort by `product` ascending.
	ServiceSortEnumProductDesc       ServiceSortEnum = "product_DESC"        // Sort by `product` descending.
	ServiceSortEnumTierAsc           ServiceSortEnum = "tier_ASC"            // Sort by `tier` ascending.
	ServiceSortEnumTierDesc          ServiceSortEnum = "tier_DESC"           // Sort by `tier` descending.
	ServiceSortEnumLifecycleAsc      ServiceSortEnum = "lifecycle_ASC"       // Sort by lifecycle ascending.
	ServiceSortEnumLifecycleDesc     ServiceSortEnum = "lifecycle_DESC"      // Sort by lifecycle descending.
	ServiceSortEnumLevelIndexAsc     ServiceSortEnum = "level_index_ASC"     // Sort by level ascending.
	ServiceSortEnumLevelIndexDesc    ServiceSortEnum = "level_index_DESC"    // Sort by level descending.
	ServiceSortEnumOwnerAsc          ServiceSortEnum = "owner_ASC"           // Sort by `owner` ascending.
	ServiceSortEnumOwnerDesc         ServiceSortEnum = "owner_DESC"          // Sort by `owner` descending.
	ServiceSortEnumChecksPassingAsc  ServiceSortEnum = "checks_passing_ASC"  // Sort by `checks_passing` ascending.
	ServiceSortEnumChecksPassingDesc ServiceSortEnum = "checks_passing_DESC" // Sort by `checks_passing` descending.
	ServiceSortEnumServiceStatAsc    ServiceSortEnum = "service_stat_ASC"    // Alias to sort by `checks_passing` ascending.
	ServiceSortEnumServiceStatDesc   ServiceSortEnum = "service_stat_DESC"   // Alias to sort by `checks_passing` descending.
	ServiceSortEnumLastDeployAsc     ServiceSortEnum = "last_deploy_ASC"     // Sort by last deploy time ascending.
	ServiceSortEnumLastDeployDesc    ServiceSortEnum = "last_deploy_DESC"    // Sort by last deploy time descending.
	ServiceSortEnumAlertStatusAsc    ServiceSortEnum = "alert_status_ASC"    // Sort by alert status ascending.
	ServiceSortEnumAlertStatusDesc   ServiceSortEnum = "alert_status_DESC"   // Sort by alert status descending.
)

// All ServiceSortEnum as []string
var AllServiceSortEnum = []string{
	string(ServiceSortEnumNameAsc),
	string(ServiceSortEnumNameDesc),
	string(ServiceSortEnumProductAsc),
	string(ServiceSortEnumProductDesc),
	string(ServiceSortEnumTierAsc),
	string(ServiceSortEnumTierDesc),
	string(ServiceSortEnumLifecycleAsc),
	string(ServiceSortEnumLifecycleDesc),
	string(ServiceSortEnumLevelIndexAsc),
	string(ServiceSortEnumLevelIndexDesc),
	string(ServiceSortEnumOwnerAsc),
	string(ServiceSortEnumOwnerDesc),
	string(ServiceSortEnumChecksPassingAsc),
	string(ServiceSortEnumChecksPassingDesc),
	string(ServiceSortEnumServiceStatAsc),
	string(ServiceSortEnumServiceStatDesc),
	string(ServiceSortEnumLastDeployAsc),
	string(ServiceSortEnumLastDeployDesc),
	string(ServiceSortEnumAlertStatusAsc),
	string(ServiceSortEnumAlertStatusDesc),
}

// TaggableResource represents possible types to apply tags to.
type TaggableResource string

const (
	TaggableResourceService                TaggableResource = "Service"                // Used to identify a Service.
	TaggableResourceRepository             TaggableResource = "Repository"             // Used to identify a Repository.
	TaggableResourceTeam                   TaggableResource = "Team"                   // Used to identify a Team.
	TaggableResourceUser                   TaggableResource = "User"                   // Used to identify a User.
	TaggableResourceDomain                 TaggableResource = "Domain"                 // Used to identify a Domain.
	TaggableResourceSystem                 TaggableResource = "System"                 // Used to identify a System.
	TaggableResourceInfrastructureresource TaggableResource = "InfrastructureResource" // Used to identify an Infrastructure Resource.
)

// All TaggableResource as []string
var AllTaggableResource = []string{
	string(TaggableResourceService),
	string(TaggableResourceRepository),
	string(TaggableResourceTeam),
	string(TaggableResourceUser),
	string(TaggableResourceDomain),
	string(TaggableResourceSystem),
	string(TaggableResourceInfrastructureresource),
}

// ToolCategory represents the specific categories that a tool can belong to.
type ToolCategory string

const (
	ToolCategoryAdmin                 ToolCategory = "admin"                  // Tools used for administrative purposes.
	ToolCategoryAPIDocumentation      ToolCategory = "api_documentation"      // Tools used as API documentation for this service.
	ToolCategoryArchitectureDiagram   ToolCategory = "architecture_diagram"   // Tools used for diagramming architecture.
	ToolCategoryBacklog               ToolCategory = "backlog"                // Tools used for tracking issues.
	ToolCategoryCode                  ToolCategory = "code"                   // Tools used for source code.
	ToolCategoryContinuousIntegration ToolCategory = "continuous_integration" // Tools used for building/unit testing a service.
	ToolCategoryDeployment            ToolCategory = "deployment"             // Tools used for deploying changes to a service.
	ToolCategoryDesignDocumentation   ToolCategory = "design_documentation"   // Tools used for documenting design.
	ToolCategoryErrors                ToolCategory = "errors"                 // Tools used for tracking/reporting errors.
	ToolCategoryFeatureFlag           ToolCategory = "feature_flag"           // Tools used for managing feature flags.
	ToolCategoryHealthChecks          ToolCategory = "health_checks"          // Tools used for tracking/reporting the health of a service.
	ToolCategoryIncidents             ToolCategory = "incidents"              // Tools used to surface incidents on a service.
	ToolCategoryIssueTracking         ToolCategory = "issue_tracking"         // Tools used for tracking issues.
	ToolCategoryLogs                  ToolCategory = "logs"                   // Tools used for displaying logs from services.
	ToolCategoryMetrics               ToolCategory = "metrics"                // Tools used for tracking/reporting service metrics.
	ToolCategoryObservability         ToolCategory = "observability"          // Tools used for observability.
	ToolCategoryOrchestrator          ToolCategory = "orchestrator"           // Tools used for orchestrating a service.
	ToolCategoryOther                 ToolCategory = "other"                  // Tools that do not fit into the available categories.
	ToolCategoryResiliency            ToolCategory = "resiliency"             // Tools used for testing the resiliency of a service.
	ToolCategoryRunbooks              ToolCategory = "runbooks"               // Tools used for managing runbooks for a service.
	ToolCategorySecurityScans         ToolCategory = "security_scans"         // Tools used for performing security scans.
	ToolCategoryStatusPage            ToolCategory = "status_page"            // Tools used for reporting the status of a service.
	ToolCategoryWiki                  ToolCategory = "wiki"                   // Tools used as a wiki for this service.
)

// All ToolCategory as []string
var AllToolCategory = []string{
	string(ToolCategoryAdmin),
	string(ToolCategoryAPIDocumentation),
	string(ToolCategoryArchitectureDiagram),
	string(ToolCategoryBacklog),
	string(ToolCategoryCode),
	string(ToolCategoryContinuousIntegration),
	string(ToolCategoryDeployment),
	string(ToolCategoryDesignDocumentation),
	string(ToolCategoryErrors),
	string(ToolCategoryFeatureFlag),
	string(ToolCategoryHealthChecks),
	string(ToolCategoryIncidents),
	string(ToolCategoryIssueTracking),
	string(ToolCategoryLogs),
	string(ToolCategoryMetrics),
	string(ToolCategoryObservability),
	string(ToolCategoryOrchestrator),
	string(ToolCategoryOther),
	string(ToolCategoryResiliency),
	string(ToolCategoryRunbooks),
	string(ToolCategorySecurityScans),
	string(ToolCategoryStatusPage),
	string(ToolCategoryWiki),
}

// UserRole represents a role that can be assigned to a user.
type UserRole string

const (
	UserRoleUser      UserRole = "user"       // A regular user on the account.
	UserRoleAdmin     UserRole = "admin"      // An administrator on the account.
	UserRoleBasicUser UserRole = "basic_user" // A basic user on the account with limited access.
)

// All UserRole as []string
var AllUserRole = []string{
	string(UserRoleUser),
	string(UserRoleAdmin),
	string(UserRoleBasicUser),
}

// UsersFilterEnum represents fields that can be used as part of filter for users.
type UsersFilterEnum string

const (
	UsersFilterEnumName          UsersFilterEnum = "name"            // Filter by `name` field.
	UsersFilterEnumEmail         UsersFilterEnum = "email"           // Filter by `email` field.
	UsersFilterEnumRole          UsersFilterEnum = "role"            // Filter by `role` field. (user or admin).
	UsersFilterEnumTag           UsersFilterEnum = "tag"             // Filter by `tags` belonging to user.
	UsersFilterEnumDeactivatedAt UsersFilterEnum = "deactivated_at"  // Filter by the `deactivated_at` field.
	UsersFilterEnumLastSignInAt  UsersFilterEnum = "last_sign_in_at" // Filter by the `last_sign_in_at` field.
)

// All UsersFilterEnum as []string
var AllUsersFilterEnum = []string{
	string(UsersFilterEnumName),
	string(UsersFilterEnumEmail),
	string(UsersFilterEnumRole),
	string(UsersFilterEnumTag),
	string(UsersFilterEnumDeactivatedAt),
	string(UsersFilterEnumLastSignInAt),
}

// VaultSecretsSortEnum represents sort possibilities for secrets.
type VaultSecretsSortEnum string

const (
	VaultSecretsSortEnumSlugAsc       VaultSecretsSortEnum = "slug_ASC"        // Sort by slug ascending.
	VaultSecretsSortEnumSlugDesc      VaultSecretsSortEnum = "slug_DESC"       // Sort by slug descending.
	VaultSecretsSortEnumUpdatedAtAsc  VaultSecretsSortEnum = "updated_at_ASC"  // Sort by updated_at ascending.
	VaultSecretsSortEnumUpdatedAtDesc VaultSecretsSortEnum = "updated_at_DESC" // Sort by updated_at descending.
)

// All VaultSecretsSortEnum as []string
var AllVaultSecretsSortEnum = []string{
	string(VaultSecretsSortEnumSlugAsc),
	string(VaultSecretsSortEnumSlugDesc),
	string(VaultSecretsSortEnumUpdatedAtAsc),
	string(VaultSecretsSortEnumUpdatedAtDesc),
}
