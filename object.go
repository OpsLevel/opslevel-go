// Code generated by gen.go; DO NOT EDIT.

package opslevel

import "github.com/relvacode/iso8601"

// AlertSource represents an alert source that is currently integrated and belongs to the account.
type AlertSource struct {
	Description string              `graphql:"description" json:"description"` // The description of the alert source.
	ExternalId  string              `graphql:"externalId" json:"externalId"`   // The external id of the alert.
	Id          ID                  `graphql:"id" json:"id"`                   // The id of the alert source.
	Integration IntegrationId       `graphql:"integration" json:"integration"` // The integration of the alert source.
	Metadata    string              `graphql:"metadata" json:"metadata"`       // The metadata of the alert source.
	Name        string              `graphql:"name" json:"name"`               // The name of the alert source.
	Type        AlertSourceTypeEnum `graphql:"type" json:"type"`               // The type of the alert.
	Url         string              `graphql:"url" json:"url"`                 // The url to the alert source.
}

// AlertSourceService represents an alert source that is connected with a service.
type AlertSourceService struct {
	AlertSource AlertSource               `graphql:"alertSource" json:"alertSource"` // The alert source that is mapped to a service
	Id          ID                        `graphql:"id" json:"id"`                   // id of the alert_source_service mapping.
	Service     ServiceId                 `graphql:"service" json:"service"`         // The service the alert source maps to.
	Status      AlertSourceStatusTypeEnum `graphql:"status" json:"status"`           // The status of the alert source.
}

// ApiDocIntegration
type ApiDocIntegration struct {
	AccountName         string       `graphql:"accountName" json:"accountName"`                 // The path of the group.
	AccountUrl          string       `graphql:"accountUrl" json:"accountUrl"`                   // The web url of the group.
	Active              bool         `graphql:"active" json:"active"`                           // Indicates whether or not the integration is currently active.
	ConfigUrl           string       `graphql:"configUrl" json:"configUrl"`                     // The external URL to where the integration can be configured.
	CreatedAt           iso8601.Time `graphql:"createdAt" json:"createdAt"`                     // The time this integration was created.
	DisplayName         string       `graphql:"displayName" json:"displayName"`                 // The display name of the integration.
	Href                string       `graphql:"href" json:"href"`                               // The relative url to where the integration can be accessed.
	HtmlUrl             string       `graphql:"htmlUrl" json:"htmlUrl"`                         // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	Id                  ID           `graphql:"id" json:"id"`                                   // The unique identifier for the integration.
	InstalledAt         iso8601.Time `graphql:"installedAt" json:"installedAt"`                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt       iso8601.Time `graphql:"invalidatedAt" json:"invalidatedAt"`             // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason   string       `graphql:"invalidatedReason" json:"invalidatedReason"`     // The reason that the integration was invalidated.
	LastEventReceived   iso8601.Time `graphql:"lastEventReceived" json:"lastEventReceived"`     // The time an event payload was provided for this integration.
	Name                string       `graphql:"name" json:"name"`                               // The name of the integration.
	Type                string       `graphql:"type" json:"type"`                               // The type of the integration.
	UninstallInProgress bool         `graphql:"uninstallInProgress" json:"uninstallInProgress"` // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl          string       `graphql:"webhookUrl" json:"webhookUrl"`                   // The endpoint to send events via webhook (if applicable).
}

// ArgocdDeployIntegration
type ArgocdDeployIntegration struct {
	AccountName         string       `graphql:"accountName" json:"accountName"`                 // The path of the group.
	AccountUrl          string       `graphql:"accountUrl" json:"accountUrl"`                   // The web url of the group.
	Active              bool         `graphql:"active" json:"active"`                           // Indicates whether or not the integration is currently active.
	ConfigUrl           string       `graphql:"configUrl" json:"configUrl"`                     // The external URL to where the integration can be configured.
	CreatedAt           iso8601.Time `graphql:"createdAt" json:"createdAt"`                     // The time this integration was created.
	DisplayName         string       `graphql:"displayName" json:"displayName"`                 // The display name of the integration.
	Href                string       `graphql:"href" json:"href"`                               // The relative url to where the integration can be accessed.
	HtmlUrl             string       `graphql:"htmlUrl" json:"htmlUrl"`                         // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	Id                  ID           `graphql:"id" json:"id"`                                   // The unique identifier for the integration.
	InstalledAt         iso8601.Time `graphql:"installedAt" json:"installedAt"`                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt       iso8601.Time `graphql:"invalidatedAt" json:"invalidatedAt"`             // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason   string       `graphql:"invalidatedReason" json:"invalidatedReason"`     // The reason that the integration was invalidated.
	LastEventReceived   iso8601.Time `graphql:"lastEventReceived" json:"lastEventReceived"`     // The time an event payload was provided for this integration.
	Name                string       `graphql:"name" json:"name"`                               // The name of the integration.
	Type                string       `graphql:"type" json:"type"`                               // The type of the integration.
	UninstallInProgress bool         `graphql:"uninstallInProgress" json:"uninstallInProgress"` // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl          string       `graphql:"webhookUrl" json:"webhookUrl"`                   // The endpoint to send events via webhook (if applicable).
}

// AwsIntegration
type AwsIntegration struct {
	AccountName              string              `graphql:"accountName" json:"accountName"`                           // The path of the group.
	AccountUrl               string              `graphql:"accountUrl" json:"accountUrl"`                             // The web url of the group.
	Active                   bool                `graphql:"active" json:"active"`                                     // Indicates whether or not the integration is currently active.
	Aliases                  []string            `graphql:"aliases" json:"aliases"`                                   // All of the aliases attached to the integration.
	AwsTagsOverrideOwnership bool                `graphql:"awsTagsOverrideOwnership" json:"awsTagsOverrideOwnership"` // Allow tags imported from AWS to override ownership set in OpsLevel directly.
	ConfigUrl                string              `graphql:"configUrl" json:"configUrl"`                               // The external URL to where the integration can be configured.
	CreatedAt                iso8601.Time        `graphql:"createdAt" json:"createdAt"`                               // The time this integration was created.
	DisplayName              string              `graphql:"displayName" json:"displayName"`                           // The display name of the integration.
	ExternalId               string              `graphql:"externalId" json:"externalId"`                             // The External ID defined in the trust relationship to ensure OpsLevel is the only third party assuming this role (See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html for more details).
	Href                     string              `graphql:"href" json:"href"`                                         // The relative url to where the integration can be accessed.
	HtmlUrl                  string              `graphql:"htmlUrl" json:"htmlUrl"`                                   // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	IamRole                  string              `graphql:"iamRole" json:"iamRole"`                                   // The IAM role OpsLevel uses in order to access the AWS account.
	Id                       ID                  `graphql:"id" json:"id"`                                             // The unique identifier for the integration.
	InstalledAt              iso8601.Time        `graphql:"installedAt" json:"installedAt"`                           // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt            iso8601.Time        `graphql:"invalidatedAt" json:"invalidatedAt"`                       // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason        string              `graphql:"invalidatedReason" json:"invalidatedReason"`               // The reason that the integration was invalidated.
	LastEventReceived        iso8601.Time        `graphql:"lastEventReceived" json:"lastEventReceived"`               // The time an event payload was provided for this integration.
	Name                     string              `graphql:"name" json:"name"`                                         // The name of the integration.
	OwnershipTagKeys         []string            `graphql:"ownershipTagKeys" json:"ownershipTagKeys"`                 // An array of tag keys used to associate ownership from an integration. Max 5.
	RegionOverride           []string            `graphql:"regionOverride" json:"regionOverride"`                     // Overrides the AWS region(s) that will be synchronized by this integration.
	TagRelationshipKeys      TagRelationshipKeys `graphql:"tagRelationshipKeys" json:"tagRelationshipKeys"`           // Set of keys used to generate relationships from the tags imported by this integration.
	Type                     string              `graphql:"type" json:"type"`                                         // The type of the integration.
	UninstallInProgress      bool                `graphql:"uninstallInProgress" json:"uninstallInProgress"`           // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl               string              `graphql:"webhookUrl" json:"webhookUrl"`                             // The endpoint to send events via webhook (if applicable).
}

// AzureDevopsIntegration
type AzureDevopsIntegration struct {
	AccountErrors       []string                     `graphql:"accountErrors" json:"accountErrors"`             // Errors detected when integrating with the AzureDevOps account.
	AccountName         string                       `graphql:"accountName" json:"accountName"`                 // The path of the group.
	AccountUrl          string                       `graphql:"accountUrl" json:"accountUrl"`                   // The web url of the group.
	Active              bool                         `graphql:"active" json:"active"`                           // Indicates whether or not the integration is currently active.
	ConfigUrl           string                       `graphql:"configUrl" json:"configUrl"`                     // The external URL to where the integration can be configured.
	CreatedAt           iso8601.Time                 `graphql:"createdAt" json:"createdAt"`                     // The time this integration was created.
	DisplayName         string                       `graphql:"displayName" json:"displayName"`                 // The display name of the integration.
	Href                string                       `graphql:"href" json:"href"`                               // The relative url to where the integration can be accessed.
	HtmlUrl             string                       `graphql:"htmlUrl" json:"htmlUrl"`                         // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	Id                  ID                           `graphql:"id" json:"id"`                                   // The unique identifier for the integration.
	InstalledAt         iso8601.Time                 `graphql:"installedAt" json:"installedAt"`                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt       iso8601.Time                 `graphql:"invalidatedAt" json:"invalidatedAt"`             // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason   string                       `graphql:"invalidatedReason" json:"invalidatedReason"`     // The reason that the integration was invalidated.
	LastEventReceived   iso8601.Time                 `graphql:"lastEventReceived" json:"lastEventReceived"`     // The time an event payload was provided for this integration.
	Name                string                       `graphql:"name" json:"name"`                               // The name of the integration.
	PermissionsErrors   []AzureDevopsPermissionError `graphql:"permissionsErrors" json:"permissionsErrors"`     // Errors detected when attempting to read AzureDevOps projects.
	Type                string                       `graphql:"type" json:"type"`                               // The type of the integration.
	UninstallInProgress bool                         `graphql:"uninstallInProgress" json:"uninstallInProgress"` // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl          string                       `graphql:"webhookUrl" json:"webhookUrl"`                   // The endpoint to send events via webhook (if applicable).
}

// AzureDevopsPermissionError
type AzureDevopsPermissionError struct {
	Name        string   `graphql:"name" json:"name"`               // The name of the object that the error was encountered on.
	Permissions []string `graphql:"permissions" json:"permissions"` // The permissions that are missing.
	Type        string   `graphql:"type" json:"type"`               // The type of the object that the error was encountered on.
}

// AzureResourcesIntegration
type AzureResourcesIntegration struct {
	AccountName           string              `graphql:"accountName" json:"accountName"`                     // The path of the group.
	AccountUrl            string              `graphql:"accountUrl" json:"accountUrl"`                       // The web url of the group.
	Active                bool                `graphql:"active" json:"active"`                               // Indicates whether or not the integration is currently active.
	Aliases               []string            `graphql:"aliases" json:"aliases"`                             // All of the aliases attached to the integration.
	ConfigUrl             string              `graphql:"configUrl" json:"configUrl"`                         // The external URL to where the integration can be configured.
	CreatedAt             iso8601.Time        `graphql:"createdAt" json:"createdAt"`                         // The time this integration was created.
	DisplayName           string              `graphql:"displayName" json:"displayName"`                     // The display name of the integration.
	Href                  string              `graphql:"href" json:"href"`                                   // The relative url to where the integration can be accessed.
	HtmlUrl               string              `graphql:"htmlUrl" json:"htmlUrl"`                             // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	Id                    ID                  `graphql:"id" json:"id"`                                       // The unique identifier for the integration.
	InstalledAt           iso8601.Time        `graphql:"installedAt" json:"installedAt"`                     // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt         iso8601.Time        `graphql:"invalidatedAt" json:"invalidatedAt"`                 // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason     string              `graphql:"invalidatedReason" json:"invalidatedReason"`         // The reason that the integration was invalidated.
	LastEventReceived     iso8601.Time        `graphql:"lastEventReceived" json:"lastEventReceived"`         // The time an event payload was provided for this integration.
	Name                  string              `graphql:"name" json:"name"`                                   // The name of the integration.
	OwnershipTagKeys      []string            `graphql:"ownershipTagKeys" json:"ownershipTagKeys"`           // An array of tag keys used to associate ownership from an integration. Max 5.
	SubscriptionId        string              `graphql:"subscriptionId" json:"subscriptionId"`               // The subscription OpsLevel uses to access the Azure account.
	TagRelationshipKeys   TagRelationshipKeys `graphql:"tagRelationshipKeys" json:"tagRelationshipKeys"`     // Set of keys used to generate relationships from the tags imported by this integration.
	TagsOverrideOwnership bool                `graphql:"tagsOverrideOwnership" json:"tagsOverrideOwnership"` // Allow tags imported from Azure to override ownership set in OpsLevel directly.
	TenantId              string              `graphql:"tenantId" json:"tenantId"`                           // The tenant OpsLevel uses to access the Azure account.
	Type                  string              `graphql:"type" json:"type"`                                   // The type of the integration.
	UninstallInProgress   bool                `graphql:"uninstallInProgress" json:"uninstallInProgress"`     // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl            string              `graphql:"webhookUrl" json:"webhookUrl"`                       // The endpoint to send events via webhook (if applicable).
}

// BitbucketIntegration
type BitbucketIntegration struct {
	AccountName         string       `graphql:"accountName" json:"accountName"`                 // The path of the group.
	AccountUrl          string       `graphql:"accountUrl" json:"accountUrl"`                   // The web url of the group.
	Active              bool         `graphql:"active" json:"active"`                           // Indicates whether or not the integration is currently active.
	ConfigUrl           string       `graphql:"configUrl" json:"configUrl"`                     // The external URL to where the integration can be configured.
	CreatedAt           iso8601.Time `graphql:"createdAt" json:"createdAt"`                     // The time this integration was created.
	DisplayName         string       `graphql:"displayName" json:"displayName"`                 // The display name of the integration.
	Href                string       `graphql:"href" json:"href"`                               // The relative url to where the integration can be accessed.
	HtmlUrl             string       `graphql:"htmlUrl" json:"htmlUrl"`                         // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	Id                  ID           `graphql:"id" json:"id"`                                   // The unique identifier for the integration.
	InstalledAt         iso8601.Time `graphql:"installedAt" json:"installedAt"`                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt       iso8601.Time `graphql:"invalidatedAt" json:"invalidatedAt"`             // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason   string       `graphql:"invalidatedReason" json:"invalidatedReason"`     // The reason that the integration was invalidated.
	LastEventReceived   iso8601.Time `graphql:"lastEventReceived" json:"lastEventReceived"`     // The time an event payload was provided for this integration.
	Name                string       `graphql:"name" json:"name"`                               // The name of the integration.
	Type                string       `graphql:"type" json:"type"`                               // The type of the integration.
	UninstallInProgress bool         `graphql:"uninstallInProgress" json:"uninstallInProgress"` // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl          string       `graphql:"webhookUrl" json:"webhookUrl"`                   // The endpoint to send events via webhook (if applicable).
}

// Category represents a category is used to group related checks in a rubric.
type Category struct {
	Description string `graphql:"description" json:"description"` // The description of the category.
	Id          ID     `graphql:"id" json:"id"`                   // The unique identifier for the category.
	Name        string `graphql:"name" json:"name"`               // The display name of the category.
}

// CategoryLevel represents the level of a specific category.
type CategoryLevel struct {
	Category Category `graphql:"category" json:"category"` // A category is used to group related checks in a rubric.
	Level    Level    `graphql:"level" json:"level"`       // A performance rating that is used to grade your services against.
}

// CheckIntegration
type CheckIntegration struct {
	AccountName         string       `graphql:"accountName" json:"accountName"`                 // The path of the group.
	AccountUrl          string       `graphql:"accountUrl" json:"accountUrl"`                   // The web url of the group.
	Active              bool         `graphql:"active" json:"active"`                           // Indicates whether or not the integration is currently active.
	ConfigUrl           string       `graphql:"configUrl" json:"configUrl"`                     // The external URL to where the integration can be configured.
	CreatedAt           iso8601.Time `graphql:"createdAt" json:"createdAt"`                     // The time this integration was created.
	DisplayName         string       `graphql:"displayName" json:"displayName"`                 // The display name of the integration.
	Href                string       `graphql:"href" json:"href"`                               // The relative url to where the integration can be accessed.
	HtmlUrl             string       `graphql:"htmlUrl" json:"htmlUrl"`                         // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	Id                  ID           `graphql:"id" json:"id"`                                   // The unique identifier for the integration.
	InstalledAt         iso8601.Time `graphql:"installedAt" json:"installedAt"`                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt       iso8601.Time `graphql:"invalidatedAt" json:"invalidatedAt"`             // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason   string       `graphql:"invalidatedReason" json:"invalidatedReason"`     // The reason that the integration was invalidated.
	LastEventReceived   iso8601.Time `graphql:"lastEventReceived" json:"lastEventReceived"`     // The time an event payload was provided for this integration.
	Name                string       `graphql:"name" json:"name"`                               // The name of the integration.
	Type                string       `graphql:"type" json:"type"`                               // The type of the integration.
	UninstallInProgress bool         `graphql:"uninstallInProgress" json:"uninstallInProgress"` // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl          string       `graphql:"webhookUrl" json:"webhookUrl"`                   // The endpoint to send events via webhook (if applicable).
}

// CheckResult represents the result for a given Check.
type CheckResult struct {
	Check        Check        `graphql:"check" json:"check"`               // The check of check result.
	LastUpdated  iso8601.Time `graphql:"lastUpdated" json:"lastUpdated"`   // The time the check most recently ran.
	Message      string       `graphql:"message" json:"message"`           // The check message.
	Service      ServiceId    `graphql:"service" json:"service"`           // The service of check result.
	ServiceAlias string       `graphql:"serviceAlias" json:"serviceAlias"` // The alias for the service.
	Status       CheckStatus  `graphql:"status" json:"status"`             // The check status.
}

// CheckStats represents check stats shows a summary of check results.
type CheckStats struct {
	TotalChecks        int `graphql:"totalChecks" json:"totalChecks"`               // The number of existing checks for the resource.
	TotalPassingChecks int `graphql:"totalPassingChecks" json:"totalPassingChecks"` // The number of checks that are passing for the resource.
}

// CircleciDeployIntegration
type CircleciDeployIntegration struct {
	AccountName         string       `graphql:"accountName" json:"accountName"`                 // The path of the group.
	AccountUrl          string       `graphql:"accountUrl" json:"accountUrl"`                   // The web url of the group.
	Active              bool         `graphql:"active" json:"active"`                           // Indicates whether or not the integration is currently active.
	ConfigUrl           string       `graphql:"configUrl" json:"configUrl"`                     // The external URL to where the integration can be configured.
	CreatedAt           iso8601.Time `graphql:"createdAt" json:"createdAt"`                     // The time this integration was created.
	DisplayName         string       `graphql:"displayName" json:"displayName"`                 // The display name of the integration.
	Href                string       `graphql:"href" json:"href"`                               // The relative url to where the integration can be accessed.
	HtmlUrl             string       `graphql:"htmlUrl" json:"htmlUrl"`                         // A link to the HTML page for the resource. Ex. https://app.opslevel.com/services/shopping_cart
	Id                  ID           `graphql:"id" json:"id"`                                   // The unique identifier for the integration.
	InstalledAt         iso8601.Time `graphql:"installedAt" json:"installedAt"`                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	InvalidatedAt       iso8601.Time `graphql:"invalidatedAt" json:"invalidatedAt"`             // The time this integration was invalidated, either from OpsLevel or via the external API.
	InvalidatedReason   string       `graphql:"invalidatedReason" json:"invalidatedReason"`     // The reason that the integration was invalidated.
	LastEventReceived   iso8601.Time `graphql:"lastEventReceived" json:"lastEventReceived"`     // The time an event payload was provided for this integration.
	Name                string       `graphql:"name" json:"name"`                               // The name of the integration.
	Type                string       `graphql:"type" json:"type"`                               // The type of the integration.
	UninstallInProgress bool         `graphql:"uninstallInProgress" json:"uninstallInProgress"` // Indicates if this integration is being uninstalled from OpsLevel.
	WebhookUrl          string       `graphql:"webhookUrl" json:"webhookUrl"`                   // The endpoint to send events via webhook (if applicable).
}

// CommonVulnerabilityEnumeration represents a category system for hardware and software weaknesses.
type CommonVulnerabilityEnumeration struct {
	Identifier string `graphql:"identifier" json:"identifier"` // The identifer of this item in the CVE system.
	Url        string `graphql:"url" json:"url"`               // The url for this item in the CVE system.
}

// CommonWeaknessEnumeration represents a category system for hardware and software weaknesses.
type CommonWeaknessEnumeration struct {
	Identifier string `graphql:"identifier" json:"identifier"` // The identifer of this item in the CWE system.
	Url        string `graphql:"url" json:"url"`               // The url for this item in the CWE system.
}

// ComponentType represents information about a particular component type.
type ComponentType struct {
	Alias       string     `graphql:"alias" json:"alias"`             // The human-friendly, unique identifier of the component type.
	Description string     `graphql:"description" json:"description"` // The description of the component type.
	Href        string     `graphql:"href" json:"href"`               // The relative path to link to the component type.
	Id          ID         `graphql:"id" json:"id"`                   // The id of the component type.
	IsDefault   bool       `graphql:"isDefault" json:"isDefault"`     // Whether or not the component type is the default.
	Name        string     `graphql:"name" json:"name"`               // The name of the component type.
	Timestamps  Timestamps `graphql:"timestamps" json:"timestamps"`   // When the component type was created and updated.
}

// ConfigError represents an error that occurred when syncing an opslevel.yml file.
type ConfigError struct {
	Message        string `graphql:"message" json:"message"`               // A description of the error.
	SourceFilename string `graphql:"sourceFilename" json:"sourceFilename"` // The file name where the error was found.
}

// ConfigFile represents an OpsLevel config as code definition.
type ConfigFile struct {
	OwnerType string `graphql:"ownerType" json:"ownerType"` // The relation for which the config was returned.
	Yaml      string `graphql:"yaml" json:"yaml"`           // The OpsLevel config in yaml format.
}

// CustomActionsTemplate represents template of a custom action.
type CustomActionsTemplate struct {
	Action            CustomActionsTemplatesAction            `graphql:"action" json:"action"`                       // The template's action.
	Metadata          CustomActionsTemplatesMetadata          `graphql:"metadata" json:"metadata"`                   // The template's metadata.
	TriggerDefinition CustomActionsTemplatesTriggerDefinition `graphql:"triggerDefinition" json:"triggerDefinition"` // The template's trigger definition.
}

// CustomActionsTemplatesAction represents the action of a custom action template.
type CustomActionsTemplatesAction struct {
	Description    string                      `graphql:"description" json:"description"`       // A description of what the action should accomplish.
	Headers        JSON                        `graphql:"headers" json:"headers" scalar:"true"` // The headers sent along with the webhook, if any.
	HTTPMethod     CustomActionsHttpMethodEnum `graphql:"httpMethod" json:"httpMethod"`         // The HTTP Method used to call the webhook action.
	LiquidTemplate string                      `graphql:"liquidTemplate" json:"liquidTemplate"` // The liquid template used to generate the data sent to the external action.
	Name           string                      `graphql:"name" json:"name"`                     // The name of the external action.
	Url            string                      `graphql:"url" json:"url"`                       // The URL of the webhook action.
}

// CustomActionsTemplatesMetadata represents the metadata about the custom action template.
type CustomActionsTemplatesMetadata struct {
	Categories  []string `graphql:"categories" json:"categories"`   // The categories for the custom action template.
	Description string   `graphql:"description" json:"description"` // The description of the custom action template.
	Icon        string   `graphql:"icon" json:"icon"`               // The icon for the custom action template.
	Name        string   `graphql:"name" json:"name"`               // The name of the custom action template.
}

// CustomActionsTemplatesTriggerDefinition represents the definition of a potential trigger for a template custom action.
type CustomActionsTemplatesTriggerDefinition struct {
	AccessControl          CustomActionsTriggerDefinitionAccessControlEnum `graphql:"accessControl" json:"accessControl"`                   // The set of users that should be able to use the trigger definition.
	Description            string                                          `graphql:"description" json:"description"`                       // The description of what the trigger definition will do, supports Markdown.
	ManualInputsDefinition string                                          `graphql:"manualInputsDefinition" json:"manualInputsDefinition"` // The YAML definition of any custom inputs for this trigger definition.
	Name                   string                                          `graphql:"name" json:"name"`                                     // The name of the trigger definition.
	Published              bool                                            `graphql:"published" json:"published"`                           // The published state of the action; true if the definition is ready for use; false if it is a draft.
	ResponseTemplate       string                                          `graphql:"responseTemplate" json:"responseTemplate"`             // The liquid template used to parse the response from the External Action.
}

// CustomActionsTriggerDefinition represents the definition of a potential trigger for a custom action.
type CustomActionsTriggerDefinition struct {
	AccessControl          CustomActionsTriggerDefinitionAccessControlEnum `graphql:"accessControl" json:"accessControl"`                   // The set of users that should be able to use the trigger definition.
	Action                 CustomActionsId                                 `graphql:"action" json:"action"`                                 // The action that would be triggered.
	Aliases                []string                                        `graphql:"aliases" json:"aliases"`                               // Any aliases for this trigger definition.
	Description            string                                          `graphql:"description" json:"description"`                       // The description of what the trigger definition will do, supports Markdown.
	EntityType             CustomActionsEntityTypeEnum                     `graphql:"entityType" json:"entityType"`                         // The entity type associated with this trigger definition.
	Filter                 FilterId                                        `graphql:"filter" json:"filter"`                                 // A filter defining which services this trigger definition applies to, if present.
	Id                     ID                                              `graphql:"id" json:"id"`                                         // The ID of the trigger definition.
	ManualInputsDefinition string                                          `graphql:"manualInputsDefinition" json:"manualInputsDefinition"` // The YAML definition of any custom inputs for this trigger definition.
	Name                   string                                          `graphql:"name" json:"name"`                                     // The name of the trigger definition.
	Owner                  TeamId                                          `graphql:"owner" json:"owner"`                                   // The owner of the trigger definition.
	Published              bool                                            `graphql:"published" json:"published"`                           // The published state of the action; true if the definition is ready for use; false if it is a draft.
	ResponseTemplate       string                                          `graphql:"responseTemplate" json:"responseTemplate"`             // The liquid template used to parse the response from the External Action.
	Timestamps             Timestamps                                      `graphql:"timestamps" json:"timestamps"`                         // Relevant timestamps.
}

// TagRelationshipKeys represents returns the keys that set relationships when imported from AWS.
type TagRelationshipKeys struct {
	BelongsTo    string   `graphql:"belongsTo" json:"belongsTo"`       // The tag key that will create `belongs_to` relationships.
	DependencyOf []string `graphql:"dependencyOf" json:"dependencyOf"` // The tag keys that will create `dependency_of` relationships.
	DependsOn    []string `graphql:"dependsOn" json:"dependsOn"`       // The tag keys that will create `depends_on` relationships.
}
