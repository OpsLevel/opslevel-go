// Code generated by gen.go; DO NOT EDIT.

package opslevel

import "github.com/relvacode/iso8601"

// AlertSource represents an alert source that is currently integrated and belongs to the account.
type AlertSource struct {
	Description string              `graphql:"description" json:"description"` // The description of the alert source.
	ExternalId  string              `graphql:"externalId" json:"externalId"`   // The external id of the alert.
	Id          ID                  `graphql:"id" json:"id"`                   // The id of the alert source.
	Integration IntegrationId       `graphql:"integration" json:"integration"` // The integration of the alert source.
	Name        string              `graphql:"name" json:"name"`               // The name of the alert source.
	Type        AlertSourceTypeEnum `graphql:"type" json:"type"`               // The type of the alert.
	Url         string              `graphql:"url" json:"url"`                 // The url to the alert source.
}

// AlertSourceService represents an alert source that is connected with a service.
type AlertSourceService struct {
	AlertSource AlertSource               `graphql:"alertSource" json:"alertSource"` // The alert source that is mapped to a service.
	Id          ID                        `graphql:"id" json:"id"`                   // id of the alert_source_service mapping.
	Service     ServiceId                 `graphql:"service" json:"service"`         // The service the alert source maps to.
	Status      AlertSourceStatusTypeEnum `graphql:"status" json:"status"`           // The status of the alert source.
}

// AlertSourceUsageCheck represents .
type AlertSourceUsageCheck struct {
	AlertSourceNamePredicate string       `graphql:"alertSourceNamePredicate" json:"alertSourceNamePredicate"` // The condition that the alert source name should satisfy to be evaluated.
	AlertSourceType          string       `graphql:"alertSourceType" json:"alertSourceType"`                   // The type of the alert source.
	Campaign                 string       `graphql:"campaign" json:"campaign"`                                 // The campaign the check belongs to.
	Category                 Category     `graphql:"category" json:"category"`                                 // The category that the check belongs to.
	Description              string       `graphql:"description" json:"description"`                           // Description of the check type's purpose.
	EnableOn                 iso8601.Time `graphql:"enableOn" json:"enableOn"`                                 // The date when the check will be automatically enabled.
	Enabled                  bool         `graphql:"enabled" json:"enabled"`                                   // If the check is enabled or not.
	Filter                   Filter       `graphql:"filter" json:"filter"`                                     // The filter that the check belongs to.
	Id                       ID           `graphql:"id" json:"id"`                                             // The id of the check.
	Level                    Level        `graphql:"level" json:"level"`                                       // The level that the check belongs to.
	Name                     string       `graphql:"name" json:"name"`                                         // The display name of the check.
	Notes                    string       `graphql:"notes" json:"notes"`                                       // Additional information about the check.
	Owner                    CheckOwner   `graphql:"owner" json:"owner"`                                       // The owner of the check.
	Type                     CheckType    `graphql:"type" json:"type"`                                         // The type of check.
	Url                      string       `graphql:"url" json:"url"`                                           // The url to the check.
}

// ApiDocIntegration represents .
type ApiDocIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// AwsIntegration represents .
type AwsIntegration struct {
	Aliases                  []string     `graphql:"aliases" json:"aliases"`                                   // All of the aliases attached to the resource.
	AwsTagsOverrideOwnership string       `graphql:"awsTagsOverrideOwnership" json:"awsTagsOverrideOwnership"` // Allow tags imported from AWS to override ownership set in OpsLevel directly.
	CreatedAt                iso8601.Time `graphql:"createdAt" json:"createdAt"`                               // The time this integration was created.
	ExternalId               string       `graphql:"externalId" json:"externalId"`                             // The External ID defined in the trust relationship to ensure OpsLevel is the only third party assuming this role (See https:/docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html for more details).
	IamRole                  string       `graphql:"iamRole" json:"iamRole"`                                   // The IAM role OpsLevel uses in order to access the AWS account.
	Id                       ID           `graphql:"id" json:"id"`                                             // The unique identifier for the integration.
	InstalledAt              iso8601.Time `graphql:"installedAt" json:"installedAt"`                           // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name                     string       `graphql:"name" json:"name"`                                         // The name of the integration.
	OwnershipTagKeys         string       `graphql:"ownershipTagKeys" json:"ownershipTagKeys"`                 // An Array of tag keys used to associate ownership from an integration. Max 5.
	Type                     string       `graphql:"type" json:"type"`                                         // The type of the integration.
}

// AzureDevopsIntegration represents .
type AzureDevopsIntegration struct {
	AccountErrors     string       `graphql:"accountErrors" json:"accountErrors"`         // Errors detected when integrating with the AzureDevOps account.
	CreatedAt         iso8601.Time `graphql:"createdAt" json:"createdAt"`                 // The time this integration was created.
	Id                ID           `graphql:"id" json:"id"`                               // The unique identifier for the integration.
	InstalledAt       iso8601.Time `graphql:"installedAt" json:"installedAt"`             // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name              string       `graphql:"name" json:"name"`                           // The name of the integration.
	PermissionsErrors string       `graphql:"permissionsErrors" json:"permissionsErrors"` // Errors detected when attempting to read AzureDevOps projects.
	Type              string       `graphql:"type" json:"type"`                           // The type of the integration.
}

// AzureDevopsPermissionError represents .
type AzureDevopsPermissionError struct {
	Name        string `graphql:"name" json:"name"`               // The name of the object that the error was enountered on.
	Permissions string `graphql:"permissions" json:"permissions"` // The permissions that are missing.
	Type        string `graphql:"type" json:"type"`               // The type of the object that the error was enountered on.
}

// BitbucketIntegration represents .
type BitbucketIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// Category represents a category is used to group related checks in a rubric.
type Category struct {
	Description string `graphql:"description" json:"description"` // The description of the category.
	Id          ID     `graphql:"id" json:"id"`                   // The unique identifier for the category.
	Name        string `graphql:"name" json:"name"`               // The display name of the category.
}

// CategoryLevel represents the level of a specific category.
type CategoryLevel struct {
	Category Category `graphql:"category" json:"category"` // A category is used to group related checks in a rubric.
	Level    Level    `graphql:"level" json:"level"`       // A performance rating that is used to grade your services against.
}

// CheckIntegration represents .
type CheckIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// CheckResult represents the result for a given Check.
type CheckResult struct {
	Check        string `graphql:"check" json:"check"`               // The check of check result.
	Message      string `graphql:"message" json:"message"`           // The check message.
	Service      string `graphql:"service" json:"service"`           // The service of check result.
	ServiceAlias string `graphql:"serviceAlias" json:"serviceAlias"` // The alias for the service.
	Status       string `graphql:"status" json:"status"`             // The check status.
}

// CheckStats represents check stats shows a summary of check results.
type CheckStats struct {
	TotalChecks        bool   `graphql:"totalChecks" json:"totalChecks"`               // The number of existing checks for the resource.
	TotalPassingChecks string `graphql:"totalPassingChecks" json:"totalPassingChecks"` // The number of checks that are passing for the resource.
}

// ConfigError represents an error that occurred when syncing an opslevel.yml file.
type ConfigError struct {
	Message        string `graphql:"message" json:"message"`               // A description of the error.
	SourceFilename string `graphql:"sourceFilename" json:"sourceFilename"` // The file name where the error was found.
}

// Contact represents a method of contact for a team.
type Contact struct {
	Address     string      `graphql:"address" json:"address"`         // The contact address. Examples: support@company.com for type `email`, https:/opslevel.com for type `web`.
	DisplayName string      `graphql:"displayName" json:"displayName"` // The name shown in the UI for the contact.
	DisplayType string      `graphql:"displayType" json:"displayType"` // The type shown in the UI for the contact.
	ExternalId  string      `graphql:"externalId" json:"externalId"`   // The remote identifier of the contact method.
	Id          ID          `graphql:"id" json:"id"`                   // The unique identifier for the contact.
	IsDefault   bool        `graphql:"isDefault" json:"isDefault"`     // Indicates if this address is a team's default for the given type.
	Owner       CheckOwner  `graphql:"owner" json:"owner"`             // The team or user the contact belongs to.
	Type        ContactType `graphql:"type" json:"type"`               // The method of contact [email, slack, slack_handle, web].
}

// CustomActionsTemplate represents template of a custom action.
type CustomActionsTemplate struct {
	Action            string `graphql:"action" json:"action"`                       // The template's action.
	TriggerDefinition string `graphql:"triggerDefinition" json:"triggerDefinition"` // The template's trigger definition.
}

// CustomActionsTemplatesAction represents the action of a custom action template.
type CustomActionsTemplatesAction struct {
	Description    string `graphql:"description" json:"description"`       // A description of what the action should accomplish.
	Headers        string `graphql:"headers" json:"headers"`               // The headers sent along with the webhook, if any.
	HttpMethod     string `graphql:"httpMethod" json:"httpMethod"`         // The HTTP Method used to call the webhook action.
	LiquidTemplate string `graphql:"liquidTemplate" json:"liquidTemplate"` // The liquid template used to generate the data sent to the external action.
	Name           string `graphql:"name" json:"name"`                     // The name of the external action.
	Url            string `graphql:"url" json:"url"`                       // The URL of the webhook action.
}

// CustomActionsTemplatesMetadata represents the metadata about the custom action template.
type CustomActionsTemplatesMetadata struct {
	Categories  string `graphql:"categories" json:"categories"`   // The categories for the custom action template.
	Description string `graphql:"description" json:"description"` // The description of the custom action template.
	Icon        string `graphql:"icon" json:"icon"`               // The icon for the custom action template.
	Name        string `graphql:"name" json:"name"`               // The name of the custom action template.
}

// CustomActionsTemplatesTriggerDefinition represents the definition of a potential trigger for a template custom action.
type CustomActionsTemplatesTriggerDefinition struct {
	AccessControl          string `graphql:"accessControl" json:"accessControl"`                   // The set of users that should be able to use the trigger definition.
	Description            string `graphql:"description" json:"description"`                       // The description of what the trigger definition will do, supports Markdown.
	ManualInputsDefinition string `graphql:"manualInputsDefinition" json:"manualInputsDefinition"` // The YAML definition of any custom inputs for this trigger definition.
	Name                   string `graphql:"name" json:"name"`                                     // The name of the trigger definition.
	Published              bool   `graphql:"published" json:"published"`                           // The published state of the action; true if the definition is ready for use; false if it is a draft.
	ResponseTemplate       string `graphql:"responseTemplate" json:"responseTemplate"`             // The liquid template used to parse the response from the External Action.
}

// CustomActionsTriggerDefinition represents the definition of a potential trigger for a custom action.
type CustomActionsTriggerDefinition struct {
	AccessControl          CustomActionsTriggerDefinitionAccessControlEnum `graphql:"accessControl" json:"accessControl"`                   // The set of users that should be able to use the trigger definition.
	Action                 CustomActionsId                                 `graphql:"action" json:"action"`                                 // The action that would be triggered.
	Aliases                []string                                        `graphql:"aliases" json:"aliases"`                               // Any aliases for this trigger definition.
	Description            string                                          `graphql:"description" json:"description"`                       // The description of what the trigger definition will do, supports Markdown.
	EntityType             CustomActionsEntityTypeEnum                     `graphql:"entityType" json:"entityType"`                         // The entity type associated with this trigger definition.
	Filter                 FilterId                                        `graphql:"filter" json:"filter"`                                 // A filter defining which services this trigger definition applies to, if present.
	Id                     ID                                              `graphql:"id" json:"id"`                                         // The ID of the trigger definition.
	ManualInputsDefinition string                                          `graphql:"manualInputsDefinition" json:"manualInputsDefinition"` // The YAML definition of any custom inputs for this trigger definition.
	Name                   string                                          `graphql:"name" json:"name"`                                     // The name of the trigger definition.
	Owner                  TeamId                                          `graphql:"owner" json:"owner"`                                   // The owner of the trigger definition.
	Published              bool                                            `graphql:"published" json:"published"`                           // The published state of the action; true if the definition is ready for use; false if it is a draft.
	ResponseTemplate       string                                          `graphql:"responseTemplate" json:"responseTemplate"`             // The liquid template used to parse the response from the External Action.
	Timestamps             Timestamps                                      `graphql:"timestamps" json:"timestamps"`                         // Relevant timestamps.
}

// CustomActionsTriggerEvent represents a single instance of an invocation of a trigger definition.
type CustomActionsTriggerEvent struct {
	AssociatedObject string     `graphql:"associatedObject" json:"associatedObject"` // The object that the event was triggered on.
	Context          string     `graphql:"context" json:"context"`                   // The context values used to render the action's templates.
	Definition       string     `graphql:"definition" json:"definition"`             // The definition of the trigger event.
	Id               ID         `graphql:"id" json:"id"`                             // The ID of the trigger definition Event.
	RenderedResponse string     `graphql:"renderedResponse" json:"renderedResponse"` // The response to the user, as generated from the template on the Trigger Definition.
	Request          string     `graphql:"request" json:"request"`                   // The request sent to the action.
	Response         string     `graphql:"response" json:"response"`                 // The response recevied from the action.
	Status           string     `graphql:"status" json:"status"`                     // The status of the trigger event.
	Timestamps       Timestamps `graphql:"timestamps" json:"timestamps"`             // Relevant timestamps.
	User             string     `graphql:"user" json:"user"`                         // The user that triggered the event.
}

// CustomActionsWebhookAction represents an external webhook action to be triggered by a custom action.
type CustomActionsWebhookAction struct {
	Aliases        []string                    `graphql:"aliases" json:"aliases"`               // Any aliases for this external action.
	Description    string                      `graphql:"description" json:"description"`       // A description of what the action should accomplish.
	Headers        JSON                        `graphql:"headers" json:"headers" scalar:"true"` // The headers sent along with the webhook, if any.
	HttpMethod     CustomActionsHttpMethodEnum `graphql:"httpMethod" json:"httpMethod"`         // The HTTP Method used to call the webhook action.
	Id             ID                          `graphql:"id" json:"id"`                         // The ID of the external action.
	LiquidTemplate string                      `graphql:"liquidTemplate" json:"liquidTemplate"` // The liquid template used to generate the data sent to the external action.
	Name           string                      `graphql:"name" json:"name"`                     // The name of the external action.
	WebhookUrl     string                      `graphql:"webhookUrl" json:"webhookUrl"`         // The URL of the webhook action.
}

// CustomCheck represents .
type CustomCheck struct {
	Campaign    string       `graphql:"campaign" json:"campaign"`       // The campaign the check belongs to.
	Category    Category     `graphql:"category" json:"category"`       // The category that the check belongs to.
	Description string       `graphql:"description" json:"description"` // Description of the check type's purpose.
	EnableOn    iso8601.Time `graphql:"enableOn" json:"enableOn"`       // The date when the check will be automatically enabled.
	Enabled     bool         `graphql:"enabled" json:"enabled"`         // If the check is enabled or not.
	Filter      Filter       `graphql:"filter" json:"filter"`           // The filter that the check belongs to.
	Id          ID           `graphql:"id" json:"id"`                   // The id of the check.
	Level       Level        `graphql:"level" json:"level"`             // The level that the check belongs to.
	Name        string       `graphql:"name" json:"name"`               // The display name of the check.
	Notes       string       `graphql:"notes" json:"notes"`             // Additional information about the check.
	Owner       CheckOwner   `graphql:"owner" json:"owner"`             // The owner of the check.
	Type        CheckType    `graphql:"type" json:"type"`               // The type of check.
	Url         string       `graphql:"url" json:"url"`                 // The url to the check.
}

// CustomEventCheck represents .
type CustomEventCheck struct {
	Campaign         string       `graphql:"campaign" json:"campaign"`                 // The campaign the check belongs to.
	Category         Category     `graphql:"category" json:"category"`                 // The category that the check belongs to.
	Description      string       `graphql:"description" json:"description"`           // Description of the check type's purpose.
	EnableOn         iso8601.Time `graphql:"enableOn" json:"enableOn"`                 // The date when the check will be automatically enabled.
	Enabled          bool         `graphql:"enabled" json:"enabled"`                   // If the check is enabled or not.
	Filter           Filter       `graphql:"filter" json:"filter"`                     // The filter that the check belongs to.
	Id               ID           `graphql:"id" json:"id"`                             // The id of the check.
	Integration      string       `graphql:"integration" json:"integration"`           // The integration this check uses.
	Level            Level        `graphql:"level" json:"level"`                       // The level that the check belongs to.
	Name             string       `graphql:"name" json:"name"`                         // The display name of the check.
	Notes            string       `graphql:"notes" json:"notes"`                       // Additional information about the check.
	Owner            CheckOwner   `graphql:"owner" json:"owner"`                       // The owner of the check.
	PassPending      string       `graphql:"passPending" json:"passPending"`           // True if this check should pass by default. Otherwise the default 'pending' state counts as a failure.
	ResultMessage    string       `graphql:"resultMessage" json:"resultMessage"`       // The check result message template.
	ServiceSelector  string       `graphql:"serviceSelector" json:"serviceSelector"`   // A jq expression that will be ran against your payload to select the service.
	SuccessCondition string       `graphql:"successCondition" json:"successCondition"` // A jq expression that will be ran against your payload to evaluate the check result. A truthy value will result in the check passing.
	Type             CheckType    `graphql:"type" json:"type"`                         // The type of check.
	Url              string       `graphql:"url" json:"url"`                           // The url to the check.
}

// DatadogIntegration represents .
type DatadogIntegration struct {
	AllowManualSyncAlertSources string       `graphql:"allowManualSyncAlertSources" json:"allowManualSyncAlertSources"` // Indicates if manual alert source synchronization can be triggered.
	CreatedAt                   iso8601.Time `graphql:"createdAt" json:"createdAt"`                                     // The time this integration was created.
	Id                          ID           `graphql:"id" json:"id"`                                                   // The unique identifier for the integration.
	InstalledAt                 iso8601.Time `graphql:"installedAt" json:"installedAt"`                                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	LastManualSyncAlertSources  string       `graphql:"lastManualSyncAlertSources" json:"lastManualSyncAlertSources"`   // The time that alert sources were last manually synchronized at.
	Name                        string       `graphql:"name" json:"name"`                                               // The name of the integration.
	Type                        string       `graphql:"type" json:"type"`                                               // The type of the integration.
}

// Deploy represents an event sent via webhook to track deploys.
type Deploy struct {
	AssociatedUser      string `graphql:"associatedUser" json:"associatedUser"`           // The associated OpsLevel user for the deploy.
	Author              string `graphql:"author" json:"author"`                           // The author of the deploy.
	CommitAuthorEmail   string `graphql:"commitAuthorEmail" json:"commitAuthorEmail"`     // The email of the commit.
	CommitAuthorName    string `graphql:"commitAuthorName" json:"commitAuthorName"`       // The author of the commit.
	CommitAuthoringDate string `graphql:"commitAuthoringDate" json:"commitAuthoringDate"` // The time the commit was authored.
	CommitBranch        string `graphql:"commitBranch" json:"commitBranch"`               // The branch the commit took place on.
	CommitMessage       string `graphql:"commitMessage" json:"commitMessage"`             // The commit message associated with the deploy.
	CommitSha           string `graphql:"commitSha" json:"commitSha"`                     // The sha associated with the commit of the deploy.
	CommittedAt         string `graphql:"committedAt" json:"committedAt"`                 // The time the commit happened.
	CommitterEmail      string `graphql:"committerEmail" json:"committerEmail"`           // The email of the person who created the commit.
	CommitterName       string `graphql:"committerName" json:"committerName"`             // The name of the person who created the commit.
	DedupId             string `graphql:"dedupId" json:"dedupId"`                         // The deduplication ID provided to prevent duplicate deploys.
	DeployNumber        string `graphql:"deployNumber" json:"deployNumber"`               // An identifier to keep track of the version of the deploy.
	DeployUrl           string `graphql:"deployUrl" json:"deployUrl"`                     // The url the where the deployment can be found.
	DeployedAt          string `graphql:"deployedAt" json:"deployedAt"`                   // The time the deployment happened.
	DeployerEmail       string `graphql:"deployerEmail" json:"deployerEmail"`             // The email of who is responsible for the deployment.
	DeployerId          string `graphql:"deployerId" json:"deployerId"`                   // An external id of who deployed.
	DeployerName        string `graphql:"deployerName" json:"deployerName"`               // The name of who is responsible for the deployment.
	Description         string `graphql:"description" json:"description"`                 // The given description of the deploy.
	Environment         string `graphql:"environment" json:"environment"`                 // The environment in which the deployment happened in.
	Id                  ID     `graphql:"id" json:"id"`                                   // The id of the deploy.
	ProviderName        string `graphql:"providerName" json:"providerName"`               // The integration name of the deploy.
	ProviderType        string `graphql:"providerType" json:"providerType"`               // The integration type used the deploy.
	ProviderUrl         string `graphql:"providerUrl" json:"providerUrl"`                 // The url to the deploy integration.
	Service             string `graphql:"service" json:"service"`                         // The service object the deploy is attached to.
	ServiceAlias        string `graphql:"serviceAlias" json:"serviceAlias"`               // The alias used to associated this deploy to its service.
	ServiceId           string `graphql:"serviceId" json:"serviceId"`                     // The id the deploy is associated to.
	Status              string `graphql:"status" json:"status"`                           // The deployment status.
}

// DeployIntegration represents .
type DeployIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// Domain represents a collection of related Systems.
type Domain struct {
	DomainId

	Description    string      `graphql:"description" json:"description"`       // The description of the Domain.
	HtmlUrl        string      `graphql:"htmlUrl" json:"htmlUrl"`               // A link to the HTML page for the resource. Ex. https:/app.opslevel.com/services/shopping_cart.
	ManagedAliases []string    `graphql:"managedAliases" json:"managedAliases"` // A list of aliases that can be set by users. The unique identifier for the resource is omitted.
	Name           string      `graphql:"name" json:"name"`                     // The name of the object.
	Note           string      `graphql:"note" json:"note"`                     // Additional information about the domain.
	Owner          EntityOwner `graphql:"owner" json:"owner"`                   // The owner of the object.
}

// Error represents the input error of a mutation.
type Error struct {
	Message string `graphql:"message" json:"message"` // The error message.
	Path    string `graphql:"path" json:"path"`       // The path to the input field with an error.
}

// Filter represents a filter is used to select which services will have checks applied. It can also be used to filter services in reports.
type Filter struct {
	FilterId

	Connective ConnectiveEnum    `graphql:"connective" json:"connective"` // The logical operator to be used in conjunction with predicates.
	HtmlUrl    string            `graphql:"htmlUrl" json:"htmlUrl"`       // A link to the HTML page for the resource. Ex. https:/app.opslevel.com/services/shopping_cart.
	Predicates []FilterPredicate `graphql:"predicates" json:"predicates"` // The predicates used to select services.
}

// FilterPredicate represents a condition used to select services.
type FilterPredicate struct {
	CaseSensitive *bool             `graphql:"caseSensitive" json:"caseSensitive"` // Option for determining whether to compare strings case-sensitively.
	Key           PredicateKeyEnum  `graphql:"key" json:"key"`                     // The key of the condition.
	KeyData       string            `graphql:"keyData" json:"keyData"`             // Additional data used in the condition.
	Type          PredicateTypeEnum `graphql:"type" json:"type"`                   // Type of operation to be used in the condition.
	Value         string            `graphql:"value" json:"value"`                 // The value of the condition.
}

// FluxIntegration represents .
type FluxIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// GenericIntegration represents .
type GenericIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// GitBranchProtectionCheck represents .
type GitBranchProtectionCheck struct {
	Campaign    string       `graphql:"campaign" json:"campaign"`       // The campaign the check belongs to.
	Category    Category     `graphql:"category" json:"category"`       // The category that the check belongs to.
	Description string       `graphql:"description" json:"description"` // Description of the check type's purpose.
	EnableOn    iso8601.Time `graphql:"enableOn" json:"enableOn"`       // The date when the check will be automatically enabled.
	Enabled     bool         `graphql:"enabled" json:"enabled"`         // If the check is enabled or not.
	Filter      Filter       `graphql:"filter" json:"filter"`           // The filter that the check belongs to.
	Id          ID           `graphql:"id" json:"id"`                   // The id of the check.
	Level       Level        `graphql:"level" json:"level"`             // The level that the check belongs to.
	Name        string       `graphql:"name" json:"name"`               // The display name of the check.
	Notes       string       `graphql:"notes" json:"notes"`             // Additional information about the check.
	Owner       CheckOwner   `graphql:"owner" json:"owner"`             // The owner of the check.
	Type        CheckType    `graphql:"type" json:"type"`               // The type of check.
	Url         string       `graphql:"url" json:"url"`                 // The url to the check.
}

// GithubActionsIntegration represents .
type GithubActionsIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// GithubIntegration represents .
type GithubIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// GitlabIntegration represents .
type GitlabIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// HasDocumentationCheck represents .
type HasDocumentationCheck struct {
	Campaign        string       `graphql:"campaign" json:"campaign"`               // The campaign the check belongs to.
	Category        Category     `graphql:"category" json:"category"`               // The category that the check belongs to.
	Description     string       `graphql:"description" json:"description"`         // Description of the check type's purpose.
	DocumentSubtype string       `graphql:"documentSubtype" json:"documentSubtype"` // The subtype of the document.
	DocumentType    string       `graphql:"documentType" json:"documentType"`       // The type of the document.
	EnableOn        iso8601.Time `graphql:"enableOn" json:"enableOn"`               // The date when the check will be automatically enabled.
	Enabled         bool         `graphql:"enabled" json:"enabled"`                 // If the check is enabled or not.
	Filter          Filter       `graphql:"filter" json:"filter"`                   // The filter that the check belongs to.
	Id              ID           `graphql:"id" json:"id"`                           // The id of the check.
	Level           Level        `graphql:"level" json:"level"`                     // The level that the check belongs to.
	Name            string       `graphql:"name" json:"name"`                       // The display name of the check.
	Notes           string       `graphql:"notes" json:"notes"`                     // Additional information about the check.
	Owner           CheckOwner   `graphql:"owner" json:"owner"`                     // The owner of the check.
	Type            CheckType    `graphql:"type" json:"type"`                       // The type of check.
	Url             string       `graphql:"url" json:"url"`                         // The url to the check.
}

// HasRecentDeployCheck represents .
type HasRecentDeployCheck struct {
	Campaign    string       `graphql:"campaign" json:"campaign"`       // The campaign the check belongs to.
	Category    Category     `graphql:"category" json:"category"`       // The category that the check belongs to.
	Days        string       `graphql:"days" json:"days"`               // The number of days to check since the last deploy.
	Description string       `graphql:"description" json:"description"` // Description of the check type's purpose.
	EnableOn    iso8601.Time `graphql:"enableOn" json:"enableOn"`       // The date when the check will be automatically enabled.
	Enabled     bool         `graphql:"enabled" json:"enabled"`         // If the check is enabled or not.
	Filter      Filter       `graphql:"filter" json:"filter"`           // The filter that the check belongs to.
	Id          ID           `graphql:"id" json:"id"`                   // The id of the check.
	Level       Level        `graphql:"level" json:"level"`             // The level that the check belongs to.
	Name        string       `graphql:"name" json:"name"`               // The display name of the check.
	Notes       string       `graphql:"notes" json:"notes"`             // Additional information about the check.
	Owner       CheckOwner   `graphql:"owner" json:"owner"`             // The owner of the check.
	Type        CheckType    `graphql:"type" json:"type"`               // The type of check.
	Url         string       `graphql:"url" json:"url"`                 // The url to the check.
}

// InfrastructureResource represents an Infrastructure Resource.
type InfrastructureResource struct {
	Aliases              []string                           `graphql:"aliases" json:"aliases"`                           // The aliases attached to the infrastructure resource.
	Data                 JSON                               `graphql:"data" json:"data" scalar:"true"`                   // The properties that describe the Infrastructure Resource.
	Href                 string                             `graphql:"href" json:"href"`                                 // The relative path for this. Ex. /services/shopping_cart.
	Id                   ID                                 `graphql:"id" json:"id"`                                     // The identifier of the object.
	Integration          string                             `graphql:"integration" json:"integration"`                   // The Integration that was used to import the InfrastructureResource data.
	LastSyncedAt         iso8601.Time                       `graphql:"lastSyncedAt" json:"lastSyncedAt"`                 // The date that the InfrastructureResource data was last refreshed.
	Name                 string                             `graphql:"name" json:"name"`                                 // The name of the object.
	Owner                EntityOwner                        `graphql:"owner" json:"owner"`                               // The owner of the object.
	OwnerLocked          bool                               `graphql:"ownerLocked" json:"ownerLocked"`                   // Whether the resource’s owner is locked.
	ProviderData         InfrastructureResourceProviderData `graphql:"providerData" json:"providerData"`                 // Data about the provider the infrastructure resource is from.
	ProviderResourceType string                             `graphql:"providerResourceType" json:"providerResourceType"` // The type of the infrastructure resource in its provider.
	RawData              JSON                               `graphql:"rawData" json:"rawData" scalar:"true"`             // The raw, untransformed data used by OpsLevel to populate the InfrastructureResource.
	Type                 string                             `graphql:"type" json:"type"`                                 // The type of Infrastructure Resource.
}

// InfrastructureResourceProviderData represents data about the provider the infrastructure resource is from.
type InfrastructureResourceProviderData struct {
	AccountName  string `graphql:"accountName" json:"accountName"`   // The account name of the provider.
	ExternalUrl  string `graphql:"externalUrl" json:"externalUrl"`   // The external URL of the infrastructure resource in its provider.
	ProviderName string `graphql:"providerName" json:"providerName"` // The name of the provider (e.g. AWS, GCP, Azure).
}

// InfrastructureResourceSchema represents a schema for Infrastructure Resources.
type InfrastructureResourceSchema struct {
	Schema JSON   `graphql:"schema" json:"schema" scalar:"true"` // The schema definition.
	Type   string `graphql:"type" json:"type"`                   // The schema type.
}

// IssueTrackingIntegration represents .
type IssueTrackingIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// JenkinsIntegration represents .
type JenkinsIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// KubernetesIntegration represents .
type KubernetesIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// Language represents a language that can be assigned to a repository.
type Language struct {
	Name  string  `graphql:"name" json:"name"`   // The name of the language.
	Usage float32 `graphql:"usage" json:"usage"` // The percentage of the code written in that language.
}

// Level represents a performance rating that is used to grade your services against.
type Level struct {
	Alias       string `graphql:"alias" json:"alias"`             // The human-friendly, unique identifier for the level.
	Description string `graphql:"description" json:"description"` // A brief description of the level.
	Id          ID     `graphql:"id" json:"id"`                   // The unique identifier for the level.
	Index       int    `graphql:"index" json:"index"`             // The numerical representation of the level (highest is better).
	Name        string `graphql:"name" json:"name"`               // The display name of the level.
}

// LevelCount represents the total number of services in each level.
type LevelCount struct {
	Level        Level `graphql:"level" json:"level"`               // A performance rating that is used to grade your services against.
	ServiceCount bool  `graphql:"serviceCount" json:"serviceCount"` // The number of services.
}

// Lifecycle represents a lifecycle represents the current development stage of a service.
type Lifecycle struct {
	Alias       string `graphql:"alias" json:"alias"`             // The human-friendly, unique identifier for the lifecycle.
	Description string `graphql:"description" json:"description"` // The lifecycle's description.
	Id          ID     `graphql:"id" json:"id"`                   // The unique identifier for the lifecycle.
	Index       int    `graphql:"index" json:"index"`             // The numerical representation of the lifecycle.
	Name        string `graphql:"name" json:"name"`               // The lifecycle's display name.
}

// ManualCheck represents .
type ManualCheck struct {
	Campaign              string       `graphql:"campaign" json:"campaign"`                           // The campaign the check belongs to.
	Category              Category     `graphql:"category" json:"category"`                           // The category that the check belongs to.
	Description           string       `graphql:"description" json:"description"`                     // Description of the check type's purpose.
	EnableOn              iso8601.Time `graphql:"enableOn" json:"enableOn"`                           // The date when the check will be automatically enabled.
	Enabled               bool         `graphql:"enabled" json:"enabled"`                             // If the check is enabled or not.
	Filter                Filter       `graphql:"filter" json:"filter"`                               // The filter that the check belongs to.
	Id                    ID           `graphql:"id" json:"id"`                                       // The id of the check.
	Level                 Level        `graphql:"level" json:"level"`                                 // The level that the check belongs to.
	Name                  string       `graphql:"name" json:"name"`                                   // The display name of the check.
	Notes                 string       `graphql:"notes" json:"notes"`                                 // Additional information about the check.
	Owner                 CheckOwner   `graphql:"owner" json:"owner"`                                 // The owner of the check.
	Type                  CheckType    `graphql:"type" json:"type"`                                   // The type of check.
	UpdateFrequency       string       `graphql:"updateFrequency" json:"updateFrequency"`             // The minimum frequency of the updates.
	UpdateRequiresComment string       `graphql:"updateRequiresComment" json:"updateRequiresComment"` // Whether the check requires a comment or not.
	Url                   string       `graphql:"url" json:"url"`                                     // The url to the check.
}

// ManualCheckFrequency represents .
type ManualCheckFrequency struct {
	FrequencyTimeScale FrequencyTimeScale `graphql:"frequencyTimeScale" json:"frequencyTimeScale"` // The time scale type for the frequency.
	FrequencyValue     int                `graphql:"frequencyValue" json:"frequencyValue"`         // The value to be used together with the frequency scale.
	StartingDate       iso8601.Time       `graphql:"startingDate" json:"startingDate"`             // The date that the check will start to evaluate.
}

// NewRelicIntegration represents .
type NewRelicIntegration struct {
	AccountKey                  string       `graphql:"accountKey" json:"accountKey"`                                   // The New Relic Account key for this integration.
	AllowManualSyncAlertSources string       `graphql:"allowManualSyncAlertSources" json:"allowManualSyncAlertSources"` // Indicates if manual alert source synchronization can be triggered.
	BaseUrl                     string       `graphql:"baseUrl" json:"baseUrl"`                                         // The API URL for New Relic API.
	CreatedAt                   iso8601.Time `graphql:"createdAt" json:"createdAt"`                                     // The time this integration was created.
	Id                          ID           `graphql:"id" json:"id"`                                                   // The unique identifier for the integration.
	InstalledAt                 iso8601.Time `graphql:"installedAt" json:"installedAt"`                                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	LastManualSyncAlertSources  string       `graphql:"lastManualSyncAlertSources" json:"lastManualSyncAlertSources"`   // The time that alert sources were last manually synchronized at.
	Name                        string       `graphql:"name" json:"name"`                                               // The name of the integration.
	Type                        string       `graphql:"type" json:"type"`                                               // The type of the integration.
}

// OctopusDeployIntegration represents .
type OctopusDeployIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// OnPremGitlabIntegration represents .
type OnPremGitlabIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// OpsgenieIntegration represents .
type OpsgenieIntegration struct {
	AllowManualSyncAlertSources string       `graphql:"allowManualSyncAlertSources" json:"allowManualSyncAlertSources"` // Indicates if manual alert source synchronization can be triggered.
	CreatedAt                   iso8601.Time `graphql:"createdAt" json:"createdAt"`                                     // The time this integration was created.
	Id                          ID           `graphql:"id" json:"id"`                                                   // The unique identifier for the integration.
	InstalledAt                 iso8601.Time `graphql:"installedAt" json:"installedAt"`                                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	LastManualSyncAlertSources  string       `graphql:"lastManualSyncAlertSources" json:"lastManualSyncAlertSources"`   // The time that alert sources were last manually synchronized at.
	Name                        string       `graphql:"name" json:"name"`                                               // The name of the integration.
	Type                        string       `graphql:"type" json:"type"`                                               // The type of the integration.
}

// PageInfo represents information about pagination in a connection.
type PageInfo struct {
	EndCursor       string `graphql:"endCursor" json:"endCursor"`             // When paginating forwards, the cursor to continue.
	HasNextPage     bool   `graphql:"hasNextPage" json:"hasNextPage"`         // When paginating forwards, are there more items?.
	HasPreviousPage bool   `graphql:"hasPreviousPage" json:"hasPreviousPage"` // When paginating backwards, are there more items?.
	StartCursor     string `graphql:"startCursor" json:"startCursor"`         // When paginating backwards, the cursor to continue.
}

// PagerdutyIntegration represents .
type PagerdutyIntegration struct {
	AllowManualSyncAlertSources string       `graphql:"allowManualSyncAlertSources" json:"allowManualSyncAlertSources"` // Indicates if manual alert source synchronization can be triggered.
	CreatedAt                   iso8601.Time `graphql:"createdAt" json:"createdAt"`                                     // The time this integration was created.
	Id                          ID           `graphql:"id" json:"id"`                                                   // The unique identifier for the integration.
	InstalledAt                 iso8601.Time `graphql:"installedAt" json:"installedAt"`                                 // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	LastManualSyncAlertSources  string       `graphql:"lastManualSyncAlertSources" json:"lastManualSyncAlertSources"`   // The time that alert sources were last manually synchronized at.
	Name                        string       `graphql:"name" json:"name"`                                               // The name of the integration.
	Type                        string       `graphql:"type" json:"type"`                                               // The type of the integration.
}

// PayloadCheck represents .
type PayloadCheck struct {
	Campaign      string       `graphql:"campaign" json:"campaign"`           // The campaign the check belongs to.
	Category      Category     `graphql:"category" json:"category"`           // The category that the check belongs to.
	Description   string       `graphql:"description" json:"description"`     // Description of the check type's purpose.
	EnableOn      iso8601.Time `graphql:"enableOn" json:"enableOn"`           // The date when the check will be automatically enabled.
	Enabled       bool         `graphql:"enabled" json:"enabled"`             // If the check is enabled or not.
	Filter        Filter       `graphql:"filter" json:"filter"`               // The filter that the check belongs to.
	Id            ID           `graphql:"id" json:"id"`                       // The id of the check.
	JqExpression  string       `graphql:"jqExpression" json:"jqExpression"`   // A jq expression that will be ran against your payload to evaluate the check result. A truthy value will result in the check passing.
	Level         Level        `graphql:"level" json:"level"`                 // The level that the check belongs to.
	Name          string       `graphql:"name" json:"name"`                   // The display name of the check.
	Notes         string       `graphql:"notes" json:"notes"`                 // Additional information about the check.
	Owner         CheckOwner   `graphql:"owner" json:"owner"`                 // The owner of the check.
	ResultMessage string       `graphql:"resultMessage" json:"resultMessage"` // The check result message template.
	Type          CheckType    `graphql:"type" json:"type"`                   // The type of check.
	Url           string       `graphql:"url" json:"url"`                     // The url to the check.
}

// PayloadIntegration represents .
type PayloadIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// Predicate represents a condition used to select services.
type Predicate struct {
	Type  PredicateTypeEnum `graphql:"type" json:"type"`   // Type of operation to be used in the condition.
	Value string            `graphql:"value" json:"value"` // The value of the condition.
}

// Property represents a custom property value assigned to an entity.
type Property struct {
	Definition       PropertyDefinitionId `graphql:"definition" json:"definition"`             // The definition of the custom property, including its schema.
	Locked           bool                 `graphql:"locked" json:"locked"`                     // Translation missing: en.graphql.types.property.locked.
	LockerUrl        string               `graphql:"lockerUrl" json:"lockerUrl"`               // Translation missing: en.graphql.types.property.locker_url.
	Owner            EntityOwnerService   `graphql:"owner" json:"owner"`                       // The entity that the property has been assigned to.
	ValidationErrors []OpsLevelErrors     `graphql:"validationErrors" json:"validationErrors"` // Errors in current value, when validating against the definition.
	Value            *JsonString          `graphql:"value" json:"value"`                       // The value of the custom property.
}

// PropertyDefinition represents the definition of a property.
type PropertyDefinition struct {
	Aliases               []string                          `graphql:"aliases" json:"aliases"`                             // A list of human-friendly, unique identifiers of the property definition.
	AllowedInConfigFiles  bool                              `graphql:"allowedInConfigFiles" json:"allowedInConfigFiles"`   // Whether or not the property is allowed to be set in opslevel.yml config files.
	Description           string                            `graphql:"description" json:"description"`                     // The description of the property definition.
	DisplaySubtype        PropertyDefinitionDisplayTypeEnum `graphql:"displaySubtype" json:"displaySubtype"`               // The secondary inferred type of the schema.
	DisplayType           PropertyDefinitionDisplayTypeEnum `graphql:"displayType" json:"displayType"`                     // The primary inferred type of the schema.
	Id                    ID                                `graphql:"id" json:"id"`                                       // The id of the property definition.
	Name                  string                            `graphql:"name" json:"name"`                                   // The name of the property definition.
	PropertyDisplayStatus PropertyDisplayStatusEnum         `graphql:"propertyDisplayStatus" json:"propertyDisplayStatus"` // The display status of the custom property on service pages.
	Schema                JSON                              `graphql:"schema" json:"schema" scalar:"true"`                 // The schema of the property definition.
}

// Query represents the schema's entry-point for queries.
type Query struct {
	Account           string `graphql:"account" json:"account"`                     // Get information about the current account.
	PublicIpAddresses string `graphql:"publicIpAddresses" json:"publicIpAddresses"` // OpsLevel's public IP addresses.
}

// RelationshipType represents the type specifying a relationship between two resources.
type RelationshipType struct {
	Id     ID     `graphql:"id" json:"id"`         // The ID of the relationship.
	Source string `graphql:"source" json:"source"` // The resource that is the source of the relationship.
	Target string `graphql:"target" json:"target"` // The resource that is the target of the relationship.
	Type   string `graphql:"type" json:"type"`     // The type of the relationship between source and target.
}

// Repository represents a repository contains code that pertains to a service.
type Repository struct {
	Services *RepositoryServiceConnection
	Tags     *TagConnection

	ArchivedAt         iso8601.Time `graphql:"archivedAt" json:"archivedAt"`                 // The date the repository was archived.
	ConfigErrors       string       `graphql:"configErrors" json:"configErrors"`             // List of errors that occurred while syncing an opslevel.yml file.
	CreatedOn          iso8601.Time `graphql:"createdOn" json:"createdOn"`                   // The date the repository was created.
	DefaultAlias       string       `graphql:"defaultAlias" json:"defaultAlias"`             // The default human-friendly identifier assigned to the repository.
	DefaultBranch      string       `graphql:"defaultBranch" json:"defaultBranch"`           // The default branch from the repository's settings.
	Description        string       `graphql:"description" json:"description"`               // A brief description of the repository.
	Forked             bool         `graphql:"forked" json:"forked"`                         // Indicates if the repository is forked.
	HtmlUrl            string       `graphql:"htmlUrl" json:"htmlUrl"`                       // A link to the HTML page for the resource. Ex. https:/app.opslevel.com/services/shopping_cart.
	Id                 ID           `graphql:"id" json:"id"`                                 // The unique identifier for the repository.
	Languages          []Language   `graphql:"languages" json:"languages"`                   // A list of languages used in the repository.
	LastOwnerChangedAt iso8601.Time `graphql:"lastOwnerChangedAt" json:"lastOwnerChangedAt"` // The date and time of the most recent ownership change.
	Locked             bool         `graphql:"locked" json:"locked"`                         // Indicates if the repository is locked by an opslevel.yml.
	Name               string       `graphql:"name" json:"name"`                             // The name of the repository.
	Organization       string       `graphql:"organization" json:"organization"`             // The organization to which the repository belongs to.
	Owner              TeamId       `graphql:"owner" json:"owner"`                           // The team that owns the repository.
	RepoKey            string       `graphql:"repoKey" json:"repoKey"`                       // The repository's unique key from its management platform.
	Tier               Tier         `graphql:"tier" json:"tier"`                             // The software tier that the repository belongs to.
	Type               string       `graphql:"type" json:"type"`                             // The management platform of the repository.
	Url                string       `graphql:"url" json:"url"`                               // The URL of the repository.
	Visibility         string       `graphql:"visibility" json:"visibility"`                 // The level of visibility of the repository.
	Visible            bool         `graphql:"visible" json:"visible"`                       // Indicates if the repository is visible.
}

// RepositoryFileCheck represents .
type RepositoryFileCheck struct {
	Campaign              string       `graphql:"campaign" json:"campaign"`                           // The campaign the check belongs to.
	Category              Category     `graphql:"category" json:"category"`                           // The category that the check belongs to.
	Description           string       `graphql:"description" json:"description"`                     // Description of the check type's purpose.
	DirectorySearch       string       `graphql:"directorySearch" json:"directorySearch"`             // Whether the check looks for the existence of a directory instead of a file.
	EnableOn              iso8601.Time `graphql:"enableOn" json:"enableOn"`                           // The date when the check will be automatically enabled.
	Enabled               bool         `graphql:"enabled" json:"enabled"`                             // If the check is enabled or not.
	FileContentsPredicate string       `graphql:"fileContentsPredicate" json:"fileContentsPredicate"` // Condition to match the file content.
	FilePaths             string       `graphql:"filePaths" json:"filePaths"`                         // Restrict the search to certain file paths.
	Filter                Filter       `graphql:"filter" json:"filter"`                               // The filter that the check belongs to.
	Id                    ID           `graphql:"id" json:"id"`                                       // The id of the check.
	Level                 Level        `graphql:"level" json:"level"`                                 // The level that the check belongs to.
	Name                  string       `graphql:"name" json:"name"`                                   // The display name of the check.
	Notes                 string       `graphql:"notes" json:"notes"`                                 // Additional information about the check.
	Owner                 CheckOwner   `graphql:"owner" json:"owner"`                                 // The owner of the check.
	Type                  CheckType    `graphql:"type" json:"type"`                                   // The type of check.
	Url                   string       `graphql:"url" json:"url"`                                     // The url to the check.
	UseAbsoluteRoot       string       `graphql:"useAbsoluteRoot" json:"useAbsoluteRoot"`             // Whether the checks looks at the absolute root of a repo or the relative root (the directory specified when attached a repo to a service).
}

// RepositoryGrepCheck represents .
type RepositoryGrepCheck struct {
	Campaign              string       `graphql:"campaign" json:"campaign"`                           // The campaign the check belongs to.
	Category              Category     `graphql:"category" json:"category"`                           // The category that the check belongs to.
	Description           string       `graphql:"description" json:"description"`                     // Description of the check type's purpose.
	DirectorySearch       string       `graphql:"directorySearch" json:"directorySearch"`             // Whether the check looks for the existence of a directory instead of a file.
	EnableOn              iso8601.Time `graphql:"enableOn" json:"enableOn"`                           // The date when the check will be automatically enabled.
	Enabled               bool         `graphql:"enabled" json:"enabled"`                             // If the check is enabled or not.
	FileContentsPredicate string       `graphql:"fileContentsPredicate" json:"fileContentsPredicate"` // Condition to match the file content.
	FilePaths             string       `graphql:"filePaths" json:"filePaths"`                         // Restrict the search to certain file paths.
	Filter                Filter       `graphql:"filter" json:"filter"`                               // The filter that the check belongs to.
	Id                    ID           `graphql:"id" json:"id"`                                       // The id of the check.
	Level                 Level        `graphql:"level" json:"level"`                                 // The level that the check belongs to.
	Name                  string       `graphql:"name" json:"name"`                                   // The display name of the check.
	Notes                 string       `graphql:"notes" json:"notes"`                                 // Additional information about the check.
	Owner                 CheckOwner   `graphql:"owner" json:"owner"`                                 // The owner of the check.
	Type                  CheckType    `graphql:"type" json:"type"`                                   // The type of check.
	Url                   string       `graphql:"url" json:"url"`                                     // The url to the check.
}

// RepositoryIntegratedCheck represents .
type RepositoryIntegratedCheck struct {
	Campaign    string       `graphql:"campaign" json:"campaign"`       // The campaign the check belongs to.
	Category    Category     `graphql:"category" json:"category"`       // The category that the check belongs to.
	Description string       `graphql:"description" json:"description"` // Description of the check type's purpose.
	EnableOn    iso8601.Time `graphql:"enableOn" json:"enableOn"`       // The date when the check will be automatically enabled.
	Enabled     bool         `graphql:"enabled" json:"enabled"`         // If the check is enabled or not.
	Filter      Filter       `graphql:"filter" json:"filter"`           // The filter that the check belongs to.
	Id          ID           `graphql:"id" json:"id"`                   // The id of the check.
	Level       Level        `graphql:"level" json:"level"`             // The level that the check belongs to.
	Name        string       `graphql:"name" json:"name"`               // The display name of the check.
	Notes       string       `graphql:"notes" json:"notes"`             // Additional information about the check.
	Owner       CheckOwner   `graphql:"owner" json:"owner"`             // The owner of the check.
	Type        CheckType    `graphql:"type" json:"type"`               // The type of check.
	Url         string       `graphql:"url" json:"url"`                 // The url to the check.
}

// RepositoryPath represents the repository path used for this service.
type RepositoryPath struct {
	Href string `graphql:"href" json:"href"` // The deep link to the repository path where the linked service's code exists.
	Path string `graphql:"path" json:"path"` // The path where the linked service's code exists, relative to the root of the repository.
}

// RepositorySearchCheck represents .
type RepositorySearchCheck struct {
	Campaign              string       `graphql:"campaign" json:"campaign"`                           // The campaign the check belongs to.
	Category              Category     `graphql:"category" json:"category"`                           // The category that the check belongs to.
	Description           string       `graphql:"description" json:"description"`                     // Description of the check type's purpose.
	EnableOn              iso8601.Time `graphql:"enableOn" json:"enableOn"`                           // The date when the check will be automatically enabled.
	Enabled               bool         `graphql:"enabled" json:"enabled"`                             // If the check is enabled or not.
	FileContentsPredicate string       `graphql:"fileContentsPredicate" json:"fileContentsPredicate"` // Condition to match the text content.
	FileExtensions        string       `graphql:"fileExtensions" json:"fileExtensions"`               // Restrict the search to files of given extensions.
	Filter                Filter       `graphql:"filter" json:"filter"`                               // The filter that the check belongs to.
	Id                    ID           `graphql:"id" json:"id"`                                       // The id of the check.
	Level                 Level        `graphql:"level" json:"level"`                                 // The level that the check belongs to.
	Name                  string       `graphql:"name" json:"name"`                                   // The display name of the check.
	Notes                 string       `graphql:"notes" json:"notes"`                                 // Additional information about the check.
	Owner                 CheckOwner   `graphql:"owner" json:"owner"`                                 // The owner of the check.
	Type                  CheckType    `graphql:"type" json:"type"`                                   // The type of check.
	Url                   string       `graphql:"url" json:"url"`                                     // The url to the check.
}

// ScimIntegration represents .
type ScimIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// Scorecard represents a scorecard.
type Scorecard struct {
	ScorecardId

	AffectsOverallServiceLevels bool        `graphql:"affectsOverallServiceLevels" json:"affectsOverallServiceLevels"` // Specifies whether the checks on this scorecard affect services' overall maturity level.
	Description                 string      `graphql:"description" json:"description"`                                 // Description of the scorecard.
	Filter                      Filter      `graphql:"filter" json:"filter"`                                           // Filter used by the scorecard to restrict services.
	Href                        string      `graphql:"href" json:"href"`                                               // The hypertext reference (link) to the UI showing this scorecard.
	Name                        string      `graphql:"name" json:"name"`                                               // Name of the scorecard.
	Owner                       EntityOwner `graphql:"owner" json:"owner"`                                             // The owner of this scorecard. Can currently either be a team or a group.
	PassingChecks               int         `graphql:"passingChecks" json:"passingChecks"`                             // The number of checks that are passing on this scorecard. A check executed against two services counts as two.
	ServiceCount                int         `graphql:"serviceCount" json:"serviceCount"`                               // The number of services covered by this scorecard.
	ServicesReport              string      `graphql:"servicesReport" json:"servicesReport"`                           // Service stats regarding this scorecard.
	Slug                        string      `graphql:"slug" json:"slug"`                                               // Slug of the scorecard.
	TotalChecks                 int         `graphql:"totalChecks" json:"totalChecks"`                                 // The number of checks that are performed on this scorecard. A check executed against two services counts as two.
}

// ScorecardServicesReport represents service stats regarding this scorecard.
type ScorecardServicesReport struct {
	LevelCounts string `graphql:"levelCounts" json:"levelCounts"` // Services per level regarding this scorecard.
}

// Secret represents a sensitive value.
type Secret struct {
	Alias      string     `graphql:"alias" json:"alias"`           // A human reference for the secret.
	Id         ID         `graphql:"id" json:"id"`                 // A reference for the secret.
	Owner      TeamId     `graphql:"owner" json:"owner"`           // The owner of this secret.
	Timestamps Timestamps `graphql:"timestamps" json:"timestamps"` // Relevant timestamps.
}

// Service represents a service represents software deployed in your production infrastructure.
// type Service struct {
// 	ServiceId

// 	ApiDocumentPath            string                 `graphql:"apiDocumentPath" json:"apiDocumentPath"`                       // The path, relative to the service repository's base directory, from which to fetch the API document. If null, the API document is fetched from the path in the account's apiDocsDefaultPath field.
// 	CheckStats                 string                 `graphql:"checkStats" json:"checkStats"`                                 // A summary of check results on the service.
// 	ConfigErrors               string                 `graphql:"configErrors" json:"configErrors"`                             // List of errors that occurred while syncing an opslevel.yml file.
// 	Description                string                 `graphql:"description" json:"description"`                               // A brief description of the service.
// 	ExternalUuid               string                 `graphql:"externalUuid" json:"externalUuid"`                             // The service's external UUID.
// 	Framework                  string                 `graphql:"framework" json:"framework"`                                   // The primary software development framework that the service uses.
// 	HtmlUrl                    string                 `graphql:"htmlUrl" json:"htmlUrl"`                                       // A link to the HTML page for the resource. Ex. https:/app.opslevel.com/services/shopping_cart.
// 	Language                   string                 `graphql:"language" json:"language"`                                     // The primary programming language that the service is written in.
// 	Lifecycle                  Lifecycle              `graphql:"lifecycle" json:"lifecycle"`                                   // The lifecycle stage of the service.
// 	Locked                     bool                   `graphql:"locked" json:"locked"`                                         // Indicates if the service is locked by an opslevel.yml.
// 	ManagedAliases             []string               `graphql:"managedAliases" json:"managedAliases"`                         // A list of aliases that can be set by users. The unique identifier for the resource is omitted.
// 	MaturityReport             string                 `graphql:"maturityReport" json:"maturityReport"`                         // A health report on the service.
// 	Name                       string                 `graphql:"name" json:"name"`                                             // The display name of the service.
// 	Note                       string                 `graphql:"note" json:"note"`                                             // Additional information about the service.
// 	Owner                      TeamId                 `graphql:"owner" json:"owner"`                                           // The team that owns the service.
// 	Parent                     string                 `graphql:"parent" json:"parent"`                                         // Parent System of the Service.
// 	PreferredApiDocument       *ServiceDocument       `graphql:"preferredApiDocument" json:"preferredApiDocument"`             // The API document selected for display on the API docs tab on the service's page.
// 	PreferredApiDocumentSource *ApiDocumentSourceEnum `graphql:"preferredApiDocumentSource" json:"preferredApiDocumentSource"` // The API document source (push or pull) used to determine the preferred API document. If null, we try the pushed doc and then the pulled doc (in that order).
// 	Product                    string                 `graphql:"product" json:"product"`                                       // A product is an application that your end user interacts with. Multiple services can work together to power a single product.
// 	RawNote                    string                 `graphql:"rawNote" json:"rawNote"`                                       // The raw unsanitized additional information about the service.
// 	Tier                       Tier                   `graphql:"tier" json:"tier"`                                             // The software tier that the service belongs to.
// 	Timestamps                 Timestamps             `graphql:"timestamps" json:"timestamps"`                                 // Relevant timestamps.
// }

// ServiceConfigurationCheck represents .
type ServiceConfigurationCheck struct {
	Campaign    string       `graphql:"campaign" json:"campaign"`       // The campaign the check belongs to.
	Category    Category     `graphql:"category" json:"category"`       // The category that the check belongs to.
	Description string       `graphql:"description" json:"description"` // Description of the check type's purpose.
	EnableOn    iso8601.Time `graphql:"enableOn" json:"enableOn"`       // The date when the check will be automatically enabled.
	Enabled     bool         `graphql:"enabled" json:"enabled"`         // If the check is enabled or not.
	Filter      Filter       `graphql:"filter" json:"filter"`           // The filter that the check belongs to.
	Id          ID           `graphql:"id" json:"id"`                   // The id of the check.
	Level       Level        `graphql:"level" json:"level"`             // The level that the check belongs to.
	Name        string       `graphql:"name" json:"name"`               // The display name of the check.
	Notes       string       `graphql:"notes" json:"notes"`             // Additional information about the check.
	Owner       CheckOwner   `graphql:"owner" json:"owner"`             // The owner of the check.
	Type        CheckType    `graphql:"type" json:"type"`               // The type of check.
	Url         string       `graphql:"url" json:"url"`                 // The url to the check.
}

// ServiceDependency represents a service dependancy edge.
type ServiceDependency struct {
	DestinationService ServiceId `graphql:"destinationService" json:"destinationService"` // The service that was depended upon.
	Id                 ID        `graphql:"id" json:"id"`                                 // ID of the serivde dependency edge.
	Notes              string    `graphql:"notes" json:"notes"`                           // Notes about the dependency edge.
	SourceService      ServiceId `graphql:"sourceService" json:"sourceService"`           // The service that had the dependency.
}

// ServiceDependencyCheck represents .
type ServiceDependencyCheck struct {
	Campaign    string       `graphql:"campaign" json:"campaign"`       // The campaign the check belongs to.
	Category    Category     `graphql:"category" json:"category"`       // The category that the check belongs to.
	Description string       `graphql:"description" json:"description"` // Description of the check type's purpose.
	EnableOn    iso8601.Time `graphql:"enableOn" json:"enableOn"`       // The date when the check will be automatically enabled.
	Enabled     bool         `graphql:"enabled" json:"enabled"`         // If the check is enabled or not.
	Filter      Filter       `graphql:"filter" json:"filter"`           // The filter that the check belongs to.
	Id          ID           `graphql:"id" json:"id"`                   // The id of the check.
	Level       Level        `graphql:"level" json:"level"`             // The level that the check belongs to.
	Name        string       `graphql:"name" json:"name"`               // The display name of the check.
	Notes       string       `graphql:"notes" json:"notes"`             // Additional information about the check.
	Owner       CheckOwner   `graphql:"owner" json:"owner"`             // The owner of the check.
	Type        CheckType    `graphql:"type" json:"type"`               // The type of check.
	Url         string       `graphql:"url" json:"url"`                 // The url to the check.
}

// ServiceDocument represents a document that is attached to resource(s) in OpsLevel.
type ServiceDocument struct {
	Content    string                `graphql:"content" json:"content"`       // The contents of the document.
	HtmlUrl    string                `graphql:"htmlUrl" json:"htmlUrl"`       // The URL of the document, if any.
	Id         ID                    `graphql:"id" json:"id"`                 // The ID of the Document.
	Source     ServiceDocumentSource `graphql:"source" json:"source"`         // The source of the document.
	Timestamps Timestamps            `graphql:"timestamps" json:"timestamps"` // When the document was created and updated.
}

// ServiceLevelNotifications represents .
type ServiceLevelNotifications struct {
	SlackNotificationEnabled string `graphql:"slackNotificationEnabled" json:"slackNotificationEnabled"` // Whether slack notifications on service level changes are enabled on your account.
}

// ServiceMaturityReport represents the health report for this service in terms of its levels and checks.
type ServiceMaturityReport struct {
	CategoryBreakdown string `graphql:"categoryBreakdown" json:"categoryBreakdown"` // The level of each category for this service.
	OverallLevel      string `graphql:"overallLevel" json:"overallLevel"`           // The overall level for this service.
}

// ServiceOwnershipCheck represents .
type ServiceOwnershipCheck struct {
	Campaign             string       `graphql:"campaign" json:"campaign"`                         // The campaign the check belongs to.
	Category             Category     `graphql:"category" json:"category"`                         // The category that the check belongs to.
	ContactMethod        string       `graphql:"contactMethod" json:"contactMethod"`               // The type of contact method that an owner should provide.
	Description          string       `graphql:"description" json:"description"`                   // Description of the check type's purpose.
	EnableOn             iso8601.Time `graphql:"enableOn" json:"enableOn"`                         // The date when the check will be automatically enabled.
	Enabled              bool         `graphql:"enabled" json:"enabled"`                           // If the check is enabled or not.
	Filter               Filter       `graphql:"filter" json:"filter"`                             // The filter that the check belongs to.
	Id                   ID           `graphql:"id" json:"id"`                                     // The id of the check.
	Level                Level        `graphql:"level" json:"level"`                               // The level that the check belongs to.
	Name                 string       `graphql:"name" json:"name"`                                 // The display name of the check.
	Notes                string       `graphql:"notes" json:"notes"`                               // Additional information about the check.
	Owner                CheckOwner   `graphql:"owner" json:"owner"`                               // The owner of the check.
	RequireContactMethod string       `graphql:"requireContactMethod" json:"requireContactMethod"` // Whether to require a contact method for a service owner or not.
	TagKey               string       `graphql:"tagKey" json:"tagKey"`                             // The tag key that should exist for a service owner.
	TagPredicate         string       `graphql:"tagPredicate" json:"tagPredicate"`                 // The condition that should be satisfied by the tag value.
	Type                 CheckType    `graphql:"type" json:"type"`                                 // The type of check.
	Url                  string       `graphql:"url" json:"url"`                                   // The url to the check.
}

// ServicePropertyCheck represents .
type ServicePropertyCheck struct {
	Campaign               string       `graphql:"campaign" json:"campaign"`                             // The campaign the check belongs to.
	Category               Category     `graphql:"category" json:"category"`                             // The category that the check belongs to.
	Description            string       `graphql:"description" json:"description"`                       // Description of the check type's purpose.
	EnableOn               iso8601.Time `graphql:"enableOn" json:"enableOn"`                             // The date when the check will be automatically enabled.
	Enabled                bool         `graphql:"enabled" json:"enabled"`                               // If the check is enabled or not.
	Filter                 Filter       `graphql:"filter" json:"filter"`                                 // The filter that the check belongs to.
	Id                     ID           `graphql:"id" json:"id"`                                         // The id of the check.
	Level                  Level        `graphql:"level" json:"level"`                                   // The level that the check belongs to.
	Name                   string       `graphql:"name" json:"name"`                                     // The display name of the check.
	Notes                  string       `graphql:"notes" json:"notes"`                                   // Additional information about the check.
	Owner                  CheckOwner   `graphql:"owner" json:"owner"`                                   // The owner of the check.
	PropertyDefinition     string       `graphql:"propertyDefinition" json:"propertyDefinition"`         // Translation missing: en.graphql.types.service_property_check.property_definition.
	PropertyValuePredicate string       `graphql:"propertyValuePredicate" json:"propertyValuePredicate"` // The property of the service that the check will verify.
	ServiceProperty        string       `graphql:"serviceProperty" json:"serviceProperty"`               // The condition that should be satisfied by the service property value.
	Type                   CheckType    `graphql:"type" json:"type"`                                     // The type of check.
	Url                    string       `graphql:"url" json:"url"`                                       // The url to the check.
}

// ServiceRepository represents a record of the connection between a service and a repository.
type ServiceRepository struct {
	BaseDirectory string       `graphql:"baseDirectory" json:"baseDirectory"` // The directory in the repository containing opslevel.yml.
	DisplayName   string       `graphql:"displayName" json:"displayName"`     // The name displayed in the UI for the service repository.
	Id            ID           `graphql:"id" json:"id"`                       // ID of the service repository.
	Repository    RepositoryId `graphql:"repository" json:"repository"`       // The repository that is part of this connection.
	Service       ServiceId    `graphql:"service" json:"service"`             // The service that is part of this connection.
}

// SlackIntegration represents .
type SlackIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// Stats represents an object that contains statistics.
type Stats struct {
	Total           string `graphql:"total" json:"total"`                     // How many there are.
	TotalSuccessful string `graphql:"totalSuccessful" json:"totalSuccessful"` // How many are successfully passing.
}

// System represents a collection of related Services.
type System struct {
	SystemId

	Description    string      `graphql:"description" json:"description"`       // The description of the System.
	HtmlUrl        string      `graphql:"htmlUrl" json:"htmlUrl"`               // A link to the HTML page for the resource. Ex. https:/app.opslevel.com/services/shopping_cart.
	ManagedAliases []string    `graphql:"managedAliases" json:"managedAliases"` // A list of aliases that can be set by users. The unique identifier for the resource is omitted.
	Name           string      `graphql:"name" json:"name"`                     // The name of the object.
	Note           string      `graphql:"note" json:"note"`                     // Additional information about the system.
	Owner          EntityOwner `graphql:"owner" json:"owner"`                   // The owner of the object.
	Parent         Domain      `graphql:"parent" json:"parent"`                 // Parent domain of the System.
}

// Tag represents an arbitrary key-value pair associated with a resource.
type Tag struct {
	Id    ID         `graphql:"id" json:"id"`       // The unique identifier for the tag.
	Key   string     `graphql:"key" json:"key"`     // The tag's key.
	Owner CheckOwner `graphql:"owner" json:"owner"` // The resource that the tag applies to.
	Value string     `graphql:"value" json:"value"` // The tag's value.
}

// TagDefinedCheck represents .
type TagDefinedCheck struct {
	Campaign     string       `graphql:"campaign" json:"campaign"`         // The campaign the check belongs to.
	Category     Category     `graphql:"category" json:"category"`         // The category that the check belongs to.
	Description  string       `graphql:"description" json:"description"`   // Description of the check type's purpose.
	EnableOn     iso8601.Time `graphql:"enableOn" json:"enableOn"`         // The date when the check will be automatically enabled.
	Enabled      bool         `graphql:"enabled" json:"enabled"`           // If the check is enabled or not.
	Filter       Filter       `graphql:"filter" json:"filter"`             // The filter that the check belongs to.
	Id           ID           `graphql:"id" json:"id"`                     // The id of the check.
	Level        Level        `graphql:"level" json:"level"`               // The level that the check belongs to.
	Name         string       `graphql:"name" json:"name"`                 // The display name of the check.
	Notes        string       `graphql:"notes" json:"notes"`               // Additional information about the check.
	Owner        CheckOwner   `graphql:"owner" json:"owner"`               // The owner of the check.
	TagKey       string       `graphql:"tagKey" json:"tagKey"`             // The tag key where the tag predicate should be applied.
	TagPredicate string       `graphql:"tagPredicate" json:"tagPredicate"` // The condition that should be satisfied by the tag value.
	Type         CheckType    `graphql:"type" json:"type"`                 // The type of check.
	Url          string       `graphql:"url" json:"url"`                   // The url to the check.
}

// Team represents a team belongs to your organization. Teams can own multiple services.
// type Team struct {
// 	TeamId

// 	Aliases          []string `graphql:"aliases" json:"aliases"`                   // A list of human-friendly, unique identifiers for the team.
// 	Contacts         Contact  `graphql:"contacts" json:"contacts"`                 // The contacts for the team.
// 	HtmlUrl          string   `graphql:"htmlUrl" json:"htmlUrl"`                   // A link to the HTML page for the resource. Ex. https:/app.opslevel.com/services/shopping_cart.
// 	ManagedAliases   []string `graphql:"managedAliases" json:"managedAliases"`     // A list of aliases that can be set by users. The unique identifier for the resource is omitted.
// 	Name             string   `graphql:"name" json:"name"`                         // The team's display name.
// 	ParentTeam       TeamId   `graphql:"parentTeam" json:"parentTeam"`             // The parent team.
// 	Responsibilities string   `graphql:"responsibilities" json:"responsibilities"` // A description of what the team is responsible for.
// }

// TeamMembership represents .
type TeamMembership struct {
	Role string `graphql:"role" json:"role"` // Role of the user on the Team.
	Team TeamId `graphql:"team" json:"team"` // Team for the membership.
	User UserId `graphql:"user" json:"user"` // User for the membership.
}

// TerraformIntegration represents .
type TerraformIntegration struct {
	CreatedAt   iso8601.Time `graphql:"createdAt" json:"createdAt"`     // The time this integration was created.
	Id          ID           `graphql:"id" json:"id"`                   // The unique identifier for the integration.
	InstalledAt iso8601.Time `graphql:"installedAt" json:"installedAt"` // The time that this integration was successfully installed, if null, this indicates the integration was not completed installed.
	Name        string       `graphql:"name" json:"name"`               // The name of the integration.
	Type        string       `graphql:"type" json:"type"`               // The type of the integration.
}

// Tier represents a tier measures how critical or important a service is to your business.
type Tier struct {
	Alias       string `graphql:"alias" json:"alias"`             // The human-friendly, unique identifier for the tier.
	Description string `graphql:"description" json:"description"` // A brief description of the tier.
	Id          ID     `graphql:"id" json:"id"`                   // The unique identifier for the tier.
	Index       int    `graphql:"index" json:"index"`             // The numerical representation of the tier.
	Name        string `graphql:"name" json:"name"`               // The display name of the tier.
}

// Timestamps represents relevant timestamps.
type Timestamps struct {
	CreatedAt iso8601.Time `graphql:"createdAt" json:"createdAt"` // The time at which the entity was created.
	UpdatedAt iso8601.Time `graphql:"updatedAt" json:"updatedAt"` // The time at which the entity was most recently updated.
}

// Tool represents a tool is used to support the operations of a service.
type Tool struct {
	Category      ToolCategory `graphql:"category" json:"category"`           // The category that the tool belongs to.
	CategoryAlias string       `graphql:"categoryAlias" json:"categoryAlias"` // The human-friendly, unique identifier for the tool's category.
	DisplayName   string       `graphql:"displayName" json:"displayName"`     // The display name of the tool.
	Environment   string       `graphql:"environment" json:"environment"`     // The environment that the tool belongs to.
	Id            ID           `graphql:"id" json:"id"`                       // The unique identifier for the tool.
	Service       ServiceId    `graphql:"service" json:"service"`             // The service that is associated to the tool.
	Url           string       `graphql:"url" json:"url"`                     // The URL of the tool.
}

// ToolUsageCheck represents .
type ToolUsageCheck struct {
	Campaign             string       `graphql:"campaign" json:"campaign"`                         // The campaign the check belongs to.
	Category             Category     `graphql:"category" json:"category"`                         // The category that the check belongs to.
	Description          string       `graphql:"description" json:"description"`                   // Description of the check type's purpose.
	EnableOn             iso8601.Time `graphql:"enableOn" json:"enableOn"`                         // The date when the check will be automatically enabled.
	Enabled              bool         `graphql:"enabled" json:"enabled"`                           // If the check is enabled or not.
	EnvironmentPredicate string       `graphql:"environmentPredicate" json:"environmentPredicate"` // The condition that the environment should satisfy to be evaluated.
	Filter               Filter       `graphql:"filter" json:"filter"`                             // The filter that the check belongs to.
	Id                   ID           `graphql:"id" json:"id"`                                     // The id of the check.
	Level                Level        `graphql:"level" json:"level"`                               // The level that the check belongs to.
	Name                 string       `graphql:"name" json:"name"`                                 // The display name of the check.
	Notes                string       `graphql:"notes" json:"notes"`                               // Additional information about the check.
	Owner                CheckOwner   `graphql:"owner" json:"owner"`                               // The owner of the check.
	ToolCategory         string       `graphql:"toolCategory" json:"toolCategory"`                 // The category that the tool belongs to.
	ToolNamePredicate    string       `graphql:"toolNamePredicate" json:"toolNamePredicate"`       // The condition that the tool name should satisfy to be evaluated.
	ToolUrlPredicate     string       `graphql:"toolUrlPredicate" json:"toolUrlPredicate"`         // The condition that the tool url should satisfy to be evaludated.
	Type                 CheckType    `graphql:"type" json:"type"`                                 // The type of check.
	Url                  string       `graphql:"url" json:"url"`                                   // The url to the check.
}

// User represents a user is someone who belongs to an organization.
type User struct {
	UserId

	HtmlUrl string   `graphql:"htmlUrl" json:"htmlUrl"` // A link to the HTML page for the resource. Ex. https:/app.opslevel.com/services/shopping_cart.
	Name    string   `graphql:"name" json:"name"`       // The user's full name.
	Role    UserRole `graphql:"role" json:"role"`       // The user's assigned role.
}

// Warning represents the warnings of the mutation.
type Warning struct {
	Message string `graphql:"message" json:"message"` // The warning message.
}
