// Code generated by gen.go; DO NOT EDIT.

package opslevel

import "github.com/relvacode/iso8601"

// AlertSourceExternalIdentifier specifies the input needed to find an alert source with external information.
type AlertSourceExternalIdentifier struct {
	Type       AlertSourceTypeEnum `json:"type" yaml:"type" example:"pagerduty"`                                   // The type of the alert. (Required.)
	ExternalId string              `json:"externalId" yaml:"externalId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The external id of the alert. (Required.)
}

// AlertSourceServiceCreateInput specifies the input used for attaching an alert source to a service.
type AlertSourceServiceCreateInput struct {
	Service                       IdentifierInput                `json:"service" yaml:"service"`                                                                                              // The service that the alert source will be attached to. (Required.)
	AlertSourceId                 *ID                            `json:"alertSourceId,omitempty" yaml:"alertSourceId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                    // Specifies the input needed to find an alert source with external information. (Optional.)
	AlertSourceExternalIdentifier *AlertSourceExternalIdentifier `json:"alertSourceExternalIdentifier,omitempty" yaml:"alertSourceExternalIdentifier,omitempty" example:"example_identifier"` // Specifies the input needed to find an alert source with external information. (Optional.)
}

// AlertSourceServiceDeleteInput specifies the input fields used in the `alertSourceServiceDelete` mutation.
type AlertSourceServiceDeleteInput struct {
	Id ID `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the alert source service to be deleted. (Required.)
}

// AliasCreateInput represents the input for the `aliasCreate` mutation.
type AliasCreateInput struct {
	Alias   string `json:"alias" yaml:"alias" example:"example_alias"`                       // The alias you wish to create. (Required.)
	OwnerId ID     `json:"ownerId" yaml:"ownerId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The ID of the resource you want to create the alias on. Services, teams, groups, systems, and domains are supported. (Required.)
}

// AliasDeleteInput represents the input for the `aliasDelete` mutation.
type AliasDeleteInput struct {
	Alias     string             `json:"alias" yaml:"alias" example:"example_alias"`     // The alias you wish to delete. (Required.)
	OwnerType AliasOwnerTypeEnum `json:"ownerType" yaml:"ownerType" example:"scorecard"` // The resource the alias you wish to delete belongs to. (Required.)
}

// AwsIntegrationInput specifies the input fields used to create and update an AWS integration.
type AwsIntegrationInput struct {
	Name                     *string   `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                     // The name of the integration. (Optional.)
	IamRole                  *string   `json:"iamRole,omitempty" yaml:"iamRole,omitempty" example:"example_role"`                               // The IAM role OpsLevel uses in order to access the AWS account. (Optional.)
	ExternalId               *string   `json:"externalId,omitempty" yaml:"externalId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`      // The External ID defined in the trust relationship to ensure OpsLevel is the only third party assuming this role (See https:/docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html for more details). (Optional.)
	OwnershipTagKeys         *[]string `json:"ownershipTagKeys,omitempty" yaml:"ownershipTagKeys,omitempty" example:"['tag_key1', 'tag_key2']"` // An Array of tag keys used to associate ownership from an integration. Max 5. (Optional.)
	AwsTagsOverrideOwnership *bool     `json:"awsTagsOverrideOwnership,omitempty" yaml:"awsTagsOverrideOwnership,omitempty" example:"false"`    // Allow tags imported from AWS to override ownership set in OpsLevel directly. (Optional.)
}

// CategoryCreateInput specifies the input fields used to create a category.
type CategoryCreateInput struct {
	Name        string  `json:"name" yaml:"name" example:"example_name"`                                          // The display name of the category. (Required.)
	Description *string `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"` // The description of the category. (Optional.)
}

// CategoryDeleteInput specifies the input fields used to delete a category.
type CategoryDeleteInput struct {
	Id ID `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category to be deleted. (Required.)
}

// CategoryUpdateInput specifies the input fields used to update a category.
type CategoryUpdateInput struct {
	Id          ID      `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                           // The id of the category to be updated. (Required.)
	Name        *string `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                      // The display name of the category. (Optional.)
	Description *string `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"` // The description of the category. (Optional.)
}

// CheckAlertSourceUsageCreateInput specifies the input fields used to create an alert source usage check.
type CheckAlertSourceUsageCreateInput struct {
	Name                     string               `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled                  *bool                `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn                 *iso8601.Time        `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId               ID                   `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId                  ID                   `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId                  *ID                  `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId                 *ID                  `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                    *string              `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	AlertSourceType          *AlertSourceTypeEnum `json:"alertSourceType,omitempty" yaml:"alertSourceType,omitempty" example:"pagerduty"`         // The type of the alert source. (Optional.)
	AlertSourceNamePredicate *PredicateInput      `json:"alertSourceNamePredicate,omitempty" yaml:"alertSourceNamePredicate,omitempty"`           // The condition that the alert source name should satisfy to be evaluated. (Optional.)
}

// CheckAlertSourceUsageUpdateInput specifies the input fields used to update an alert source usage check.
type CheckAlertSourceUsageUpdateInput struct {
	Name                     *string               `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId               *ID                   `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId                  *ID                   `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId                  *ID                   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId                 *ID                   `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled                  *bool                 `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn                 *iso8601.Time         `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes                    *string               `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id                       ID                    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	AlertSourceType          *AlertSourceTypeEnum  `json:"alertSourceType,omitempty" yaml:"alertSourceType,omitempty" example:"pagerduty"`             // The type of the alert source. (Optional.)
	AlertSourceNamePredicate *PredicateUpdateInput `json:"alertSourceNamePredicate,omitempty" yaml:"alertSourceNamePredicate,omitempty"`               // The condition that the alert source name should satisfy to be evaluated. (Optional.)
}

// CheckCustomEventCreateInput represents creates a custom event check.
type CheckCustomEventCreateInput struct {
	Name             string        `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled          *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn         *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId       ID            `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId          ID            `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId          *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId         *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes            *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	ServiceSelector  string        `json:"serviceSelector" yaml:"serviceSelector" example:"example_selector"`                      // A jq expression that will be ran against your payload. This will parse out the service identifier. [More info about jq](https:/jqplay.org/). (Required.)
	SuccessCondition string        `json:"successCondition" yaml:"successCondition" example:"example_condition"`                   // A jq expression that will be ran against your payload. A truthy value will result in the check passing. [More info about jq](https:/jqplay.org/). (Required.)
	ResultMessage    *string       `json:"resultMessage,omitempty" yaml:"resultMessage,omitempty" example:"example_message"`       // The check result message template. It is compiled with Liquid and formatted in Markdown. [More info about liquid templates](https:/docs.opslevel.com/docs/checks/payload-checks/#liquid-templating). (Optional.)
	PassPending      *bool         `json:"passPending,omitempty" yaml:"passPending,omitempty" example:"false"`                     // True if this check should pass by default. Otherwise the default 'pending' state counts as a failure. (Optional.)
	IntegrationId    ID            `json:"integrationId" yaml:"integrationId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`           // The integration id this check will use. (Required.)
}

// CheckCustomEventUpdateInput specifies the input fields used to update a custom event check.
type CheckCustomEventUpdateInput struct {
	Name             *string       `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                      // The display name of the check. (Optional.)
	CategoryId       *ID           `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the category the check belongs to. (Optional.)
	LevelId          *ID           `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`             // The id of the level the check belongs to. (Optional.)
	OwnerId          *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`             // The id of the owner of the check. (Optional.)
	FilterId         *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`           // The id of the filter the check belongs to. (Optional.)
	Enabled          *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                       // Whether the check is enabled or not. (Optional.)
	EnableOn         *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`                  // The date when the check will be automatically enabled. (Optional.)
	Notes            *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                                   // Additional information about the check. (Optional.)
	Id               ID            `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                           // The id of the check to be updated. (Required.)
	ServiceSelector  *string       `json:"serviceSelector,omitempty" yaml:"serviceSelector,omitempty" example:"example_selector"`            // A jq expression that will be ran against your payload. This will parse out the service identifier. [More info about jq](https:/jqplay.org/). (Optional.)
	SuccessCondition *string       `json:"successCondition,omitempty" yaml:"successCondition,omitempty" example:"example_condition"`         // A jq expression that will be ran against your payload. A truthy value will result in the check passing. [More info about jq](https:/jqplay.org/). (Optional.)
	ResultMessage    *string       `json:"resultMessage,omitempty" yaml:"resultMessage,omitempty" example:"example_message"`                 // The check result message template. It is compiled with Liquid and formatted in Markdown. [More info about liquid templates](https:/docs.opslevel.com/docs/checks/payload-checks/#liquid-templating). (Optional.)
	PassPending      *bool         `json:"passPending,omitempty" yaml:"passPending,omitempty" example:"false"`                               // True if this check should pass by default. Otherwise the default 'pending' state counts as a failure. (Optional.)
	IntegrationId    *ID           `json:"integrationId,omitempty" yaml:"integrationId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The integration id this check will use. (Optional.)
}

// CheckDeleteInput specifies the input fields used to delete a check.
type CheckDeleteInput struct {
	Id *ID `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the check to be deleted. (Optional.)
}

// CheckGitBranchProtectionCreateInput specifies the input fields used to create a branch protection check.
type CheckGitBranchProtectionCreateInput struct {
	Name       string        `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId ID            `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId    ID            `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
}

// CheckGitBranchProtectionUpdateInput specifies the input fields used to update a branch protection check.
type CheckGitBranchProtectionUpdateInput struct {
	Name       *string       `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId *ID           `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId    *ID           `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id         ID            `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
}

// CheckHasDocumentationCreateInput specifies the input fields used to create a documentation check.
type CheckHasDocumentationCreateInput struct {
	Name            string                      `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled         *bool                       `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn        *iso8601.Time               `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId      ID                          `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId         ID                          `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId         *ID                         `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId        *ID                         `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes           *string                     `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	DocumentType    HasDocumentationTypeEnum    `json:"documentType" yaml:"documentType" example:"api"`                                         // The type of the document. (Required.)
	DocumentSubtype HasDocumentationSubtypeEnum `json:"documentSubtype" yaml:"documentSubtype" example:"openapi"`                               // The subtype of the document. (Required.)
}

// CheckHasDocumentationUpdateInput specifies the input fields used to update a documentation check.
type CheckHasDocumentationUpdateInput struct {
	Name            *string                      `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId      *ID                          `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId         *ID                          `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId         *ID                          `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId        *ID                          `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled         *bool                        `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn        *iso8601.Time                `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes           *string                      `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id              ID                           `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	DocumentType    *HasDocumentationTypeEnum    `json:"documentType,omitempty" yaml:"documentType,omitempty" example:"api"`                         // The type of the document. (Optional.)
	DocumentSubtype *HasDocumentationSubtypeEnum `json:"documentSubtype,omitempty" yaml:"documentSubtype,omitempty" example:"openapi"`               // The subtype of the document. (Optional.)
}

// CheckHasRecentDeployCreateInput specifies the input fields used to create a recent deploys check.
type CheckHasRecentDeployCreateInput struct {
	Name       string        `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId ID            `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId    ID            `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	Days       int           `json:"days" yaml:"days" example:"3"`                                                           // The number of days to check since the last deploy. (Required.)
}

// CheckHasRecentDeployUpdateInput specifies the input fields used to update a has recent deploy check.
type CheckHasRecentDeployUpdateInput struct {
	Name       *string       `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId *ID           `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId    *ID           `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id         ID            `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	Days       *int          `json:"days,omitempty" yaml:"days,omitempty" example:"3"`                                           // The number of days to check since the last deploy. (Optional.)
}

// CheckManualCreateInput specifies the input fields used to create a manual check.
type CheckManualCreateInput struct {
	Name                  string                     `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled               *bool                      `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time              `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId            ID                         `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId               ID                         `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId               *ID                        `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId              *ID                        `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                 *string                    `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	UpdateFrequency       *ManualCheckFrequencyInput `json:"updateFrequency,omitempty" yaml:"updateFrequency,omitempty"`                             // Defines the minimum frequency of the updates. (Optional.)
	UpdateRequiresComment bool                       `json:"updateRequiresComment" yaml:"updateRequiresComment" example:"false"`                     // Whether the check requires a comment or not. (Required.)
}

// CheckManualUpdateInput specifies the input fields used to update a manual check.
type CheckManualUpdateInput struct {
	Name                  *string                          `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId            *ID                              `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId               *ID                              `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId               *ID                              `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId              *ID                              `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled               *bool                            `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time                    `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes                 *string                          `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id                    ID                               `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	UpdateFrequency       *ManualCheckFrequencyUpdateInput `json:"updateFrequency,omitempty" yaml:"updateFrequency,omitempty"`                                 // Defines the minimum frequency of the updates. (Optional.)
	UpdateRequiresComment *bool                            `json:"updateRequiresComment,omitempty" yaml:"updateRequiresComment,omitempty" example:"false"`     // Whether the check requires a comment or not. (Optional.)
}

// CheckRepositoryFileCreateInput specifies the input fields used to create a repo file check.
type CheckRepositoryFileCreateInput struct {
	Name                  string          `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled               *bool           `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time   `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId            ID              `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId               ID              `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId               *ID             `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId              *ID             `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                 *string         `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	DirectorySearch       *bool           `json:"directorySearch,omitempty" yaml:"directorySearch,omitempty" example:"false"`             // Whether the check looks for the existence of a directory instead of a file. (Optional.)
	FilePaths             []string        `json:"filePaths" yaml:"filePaths" example:"['/usr/local/bin', '/home/opslevel']"`              // Restrict the search to certain file paths. (Required.)
	FileContentsPredicate *PredicateInput `json:"fileContentsPredicate,omitempty" yaml:"fileContentsPredicate,omitempty"`                 // Condition to match the file content. (Optional.)
	UseAbsoluteRoot       *bool           `json:"useAbsoluteRoot,omitempty" yaml:"useAbsoluteRoot,omitempty" example:"false"`             // Whether the checks looks at the absolute root of a repo or the relative root (the directory specified when attached a repo to a service). (Optional.)
}

// CheckRepositoryFileUpdateInput specifies the input fields used to update a repo file check.
type CheckRepositoryFileUpdateInput struct {
	Name                  *string               `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                   // The display name of the check. (Optional.)
	CategoryId            *ID                   `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`    // The id of the category the check belongs to. (Optional.)
	LevelId               *ID                   `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`          // The id of the level the check belongs to. (Optional.)
	OwnerId               *ID                   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`          // The id of the owner of the check. (Optional.)
	FilterId              *ID                   `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`        // The id of the filter the check belongs to. (Optional.)
	Enabled               *bool                 `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                    // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time         `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`               // The date when the check will be automatically enabled. (Optional.)
	Notes                 *string               `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                                // Additional information about the check. (Optional.)
	Id                    ID                    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                        // The id of the check to be updated. (Required.)
	DirectorySearch       *bool                 `json:"directorySearch,omitempty" yaml:"directorySearch,omitempty" example:"false"`                    // Whether the check looks for the existence of a directory instead of a file. (Optional.)
	FilePaths             *[]string             `json:"filePaths,omitempty" yaml:"filePaths,omitempty" example:"['/usr/local/bin', '/home/opslevel']"` // Restrict the search to certain file paths. (Optional.)
	FileContentsPredicate *PredicateUpdateInput `json:"fileContentsPredicate,omitempty" yaml:"fileContentsPredicate,omitempty"`                        // Condition to match the file content. (Optional.)
	UseAbsoluteRoot       *bool                 `json:"useAbsoluteRoot,omitempty" yaml:"useAbsoluteRoot,omitempty" example:"false"`                    // Whether the checks looks at the absolute root of a repo or the relative root (the directory specified when attached a repo to a service). (Optional.)
}

// CheckRepositoryGrepCreateInput specifies the input fields used to create a repo grep check.
type CheckRepositoryGrepCreateInput struct {
	Name                  string         `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled               *bool          `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time  `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId            ID             `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId               ID             `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId               *ID            `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId              *ID            `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                 *string        `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	DirectorySearch       *bool          `json:"directorySearch,omitempty" yaml:"directorySearch,omitempty" example:"false"`             // Whether the check looks for the existence of a directory instead of a file. (Optional.)
	FilePaths             []string       `json:"filePaths" yaml:"filePaths" example:"['/usr/local/bin', '/home/opslevel']"`              // Restrict the search to certain file paths. (Required.)
	FileContentsPredicate PredicateInput `json:"fileContentsPredicate" yaml:"fileContentsPredicate"`                                     // Condition to match the file content. (Required.)
}

// CheckRepositoryGrepUpdateInput specifies the input fields used to update a repo file check.
type CheckRepositoryGrepUpdateInput struct {
	Name                  *string               `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                   // The display name of the check. (Optional.)
	CategoryId            *ID                   `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`    // The id of the category the check belongs to. (Optional.)
	LevelId               *ID                   `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`          // The id of the level the check belongs to. (Optional.)
	OwnerId               *ID                   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`          // The id of the owner of the check. (Optional.)
	FilterId              *ID                   `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`        // The id of the filter the check belongs to. (Optional.)
	Enabled               *bool                 `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                    // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time         `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`               // The date when the check will be automatically enabled. (Optional.)
	Notes                 *string               `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                                // Additional information about the check. (Optional.)
	Id                    ID                    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                        // The id of the check to be updated. (Required.)
	DirectorySearch       *bool                 `json:"directorySearch,omitempty" yaml:"directorySearch,omitempty" example:"false"`                    // Whether the check looks for the existence of a directory instead of a file. (Optional.)
	FilePaths             *[]string             `json:"filePaths,omitempty" yaml:"filePaths,omitempty" example:"['/usr/local/bin', '/home/opslevel']"` // Restrict the search to certain file paths. (Optional.)
	FileContentsPredicate *PredicateUpdateInput `json:"fileContentsPredicate,omitempty" yaml:"fileContentsPredicate,omitempty"`                        // Condition to match the file content. (Optional.)
}

// CheckRepositoryIntegratedCreateInput specifies the input fields used to create a repository integrated check.
type CheckRepositoryIntegratedCreateInput struct {
	Name       string        `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId ID            `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId    ID            `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
}

// CheckRepositoryIntegratedUpdateInput specifies the input fields used to update a repository integrated check.
type CheckRepositoryIntegratedUpdateInput struct {
	Name       *string       `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId *ID           `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId    *ID           `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id         ID            `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
}

// CheckRepositorySearchCreateInput specifies the input fields used to create a repo search check.
type CheckRepositorySearchCreateInput struct {
	Name                  string         `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled               *bool          `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time  `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId            ID             `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId               ID             `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId               *ID            `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId              *ID            `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                 *string        `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	FileExtensions        *[]string      `json:"fileExtensions,omitempty" yaml:"fileExtensions,omitempty" example:"['go', 'py', 'rb']"`  // Restrict the search to files of given extensions. Extensions should contain only letters and numbers. For example: `['py', 'rb']`. (Optional.)
	FileContentsPredicate PredicateInput `json:"fileContentsPredicate" yaml:"fileContentsPredicate"`                                     // Condition to match the text content. (Required.)
}

// CheckRepositorySearchUpdateInput specifies the input fields used to update a repo search check.
type CheckRepositorySearchUpdateInput struct {
	Name                  *string               `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId            *ID                   `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId               *ID                   `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId               *ID                   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId              *ID                   `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled               *bool                 `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn              *iso8601.Time         `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes                 *string               `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id                    ID                    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	FileExtensions        *[]string             `json:"fileExtensions,omitempty" yaml:"fileExtensions,omitempty" example:"['go', 'py', 'rb']"`      // Restrict the search to files of given extensions. Extensions should contain only letters and numbers. For example: `['py', 'rb']`. (Optional.)
	FileContentsPredicate *PredicateUpdateInput `json:"fileContentsPredicate,omitempty" yaml:"fileContentsPredicate,omitempty"`                     // Condition to match the text content. (Optional.)
}

// CheckServiceConfigurationCreateInput specifies the input fields used to create a configuration check.
type CheckServiceConfigurationCreateInput struct {
	Name       string        `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId ID            `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId    ID            `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
}

// CheckServiceConfigurationUpdateInput specifies the input fields used to update a configuration check.
type CheckServiceConfigurationUpdateInput struct {
	Name       *string       `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId *ID           `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId    *ID           `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id         ID            `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
}

// CheckServiceDependencyCreateInput specifies the input fields used to create a service dependency check.
type CheckServiceDependencyCreateInput struct {
	Name       string        `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId ID            `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId    ID            `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
}

// CheckServiceDependencyUpdateInput specifies the input fields used to update a service dependency check.
type CheckServiceDependencyUpdateInput struct {
	Name       *string       `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId *ID           `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId    *ID           `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId    *ID           `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId   *ID           `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled    *bool         `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn   *iso8601.Time `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes      *string       `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id         ID            `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
}

// CheckServiceOwnershipCreateInput specifies the input fields used to create an ownership check.
type CheckServiceOwnershipCreateInput struct {
	Name                 string          `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled              *bool           `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn             *iso8601.Time   `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId           ID              `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId              ID              `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId              *ID             `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId             *ID             `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                *string         `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	RequireContactMethod *bool           `json:"requireContactMethod,omitempty" yaml:"requireContactMethod,omitempty" example:"false"`   // Whether to require a contact method for a service owner or not. (Optional.)
	ContactMethod        *string         `json:"contactMethod,omitempty" yaml:"contactMethod,omitempty" example:"example_method"`        // The type of contact method that an owner should provide. (Optional.)
	TagKey               *string         `json:"tagKey,omitempty" yaml:"tagKey,omitempty" example:"XXX_example_key_XXX"`                 // The tag key that should exist for a service owner. (Optional.)
	TagPredicate         *PredicateInput `json:"tagPredicate,omitempty" yaml:"tagPredicate,omitempty"`                                   // The condition that should be satisfied by the tag value. (Optional.)
}

// CheckServiceOwnershipUpdateInput specifies the input fields used to update an ownership check.
type CheckServiceOwnershipUpdateInput struct {
	Name                 *string               `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId           *ID                   `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId              *ID                   `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId              *ID                   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId             *ID                   `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled              *bool                 `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn             *iso8601.Time         `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes                *string               `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id                   ID                    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	RequireContactMethod *bool                 `json:"requireContactMethod,omitempty" yaml:"requireContactMethod,omitempty" example:"false"`       // Whether to require a contact method for a service owner or not. (Optional.)
	ContactMethod        *string               `json:"contactMethod,omitempty" yaml:"contactMethod,omitempty" example:"example_method"`            // The type of contact method that an owner should provide. (Optional.)
	TagKey               *string               `json:"tagKey,omitempty" yaml:"tagKey,omitempty" example:"XXX_example_key_XXX"`                     // The tag key that should exist for a service owner. (Optional.)
	TagPredicate         *PredicateUpdateInput `json:"tagPredicate,omitempty" yaml:"tagPredicate,omitempty"`                                       // The condition that should be satisfied by the tag value. (Optional.)
}

// CheckServicePropertyCreateInput specifies the input fields used to create a service property check.
type CheckServicePropertyCreateInput struct {
	Name                   string                  `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled                *bool                   `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn               *iso8601.Time           `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId             ID                      `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId                ID                      `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId                *ID                     `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId               *ID                     `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                  *string                 `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	ServiceProperty        ServicePropertyTypeEnum `json:"serviceProperty" yaml:"serviceProperty" example:"language"`                              // The property of the service that the check will verify. (Required.)
	PropertyDefinition     *IdentifierInput        `json:"propertyDefinition,omitempty" yaml:"propertyDefinition,omitempty"`                       // The secondary key of the property that the check will verify (e.g. the specific custom property). (Optional.)
	PropertyValuePredicate *PredicateInput         `json:"propertyValuePredicate,omitempty" yaml:"propertyValuePredicate,omitempty"`               // The condition that should be satisfied by the service property value. (Optional.)
}

// CheckServicePropertyUpdateInput specifies the input fields used to update a service property check.
type CheckServicePropertyUpdateInput struct {
	Name                   *string                  `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId             *ID                      `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId                *ID                      `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId                *ID                      `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId               *ID                      `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled                *bool                    `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn               *iso8601.Time            `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes                  *string                  `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id                     ID                       `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	ServiceProperty        *ServicePropertyTypeEnum `json:"serviceProperty,omitempty" yaml:"serviceProperty,omitempty" example:"language"`              // The property of the service that the check will verify. (Optional.)
	PropertyDefinition     *IdentifierInput         `json:"propertyDefinition,omitempty" yaml:"propertyDefinition,omitempty"`                           // The secondary key of the property that the check will verify (e.g. the specific custom property). (Optional.)
	PropertyValuePredicate *PredicateUpdateInput    `json:"propertyValuePredicate,omitempty" yaml:"propertyValuePredicate,omitempty"`                   // The condition that should be satisfied by the service property value. (Optional.)
}

// CheckTagDefinedCreateInput specifies the input fields used to create a tag check.
type CheckTagDefinedCreateInput struct {
	Name         string          `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled      *bool           `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn     *iso8601.Time   `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId   ID              `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId      ID              `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId      *ID             `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId     *ID             `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes        *string         `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	TagKey       string          `json:"tagKey" yaml:"tagKey" example:"XXX_example_key_XXX"`                                     // The tag key where the tag predicate should be applied. (Required.)
	TagPredicate *PredicateInput `json:"tagPredicate,omitempty" yaml:"tagPredicate,omitempty"`                                   // The condition that should be satisfied by the tag value. (Optional.)
}

// CheckTagDefinedUpdateInput specifies the input fields used to update a tag defined check.
type CheckTagDefinedUpdateInput struct {
	Name         *string               `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId   *ID                   `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId      *ID                   `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId      *ID                   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId     *ID                   `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled      *bool                 `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn     *iso8601.Time         `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes        *string               `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id           ID                    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	TagKey       *string               `json:"tagKey,omitempty" yaml:"tagKey,omitempty" example:"XXX_example_key_XXX"`                     // The tag key where the tag predicate should be applied. (Optional.)
	TagPredicate *PredicateUpdateInput `json:"tagPredicate,omitempty" yaml:"tagPredicate,omitempty"`                                       // The condition that should be satisfied by the tag value. (Optional.)
}

// CheckToPromoteInput specifies the input fields used to promote a campaign check to the rubric.
type CheckToPromoteInput struct {
	CheckId    ID `json:"checkId" yaml:"checkId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The ID of the check to be promoted to the rubric. (Required.)
	CategoryId ID `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The ID of the category that the promoted check will be linked to. (Required.)
	LevelId    ID `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The ID of the level that the promoted check will be linked to. (Required.)
}

// CheckToolUsageCreateInput specifies the input fields used to create a tool usage check.
type CheckToolUsageCreateInput struct {
	Name                 string          `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the check. (Required.)
	Enabled              *bool           `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                             // Whether the check is enabled or not. (Optional.)
	EnableOn             *iso8601.Time   `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`        // The date when the check will be automatically enabled. (Optional.)
	CategoryId           ID              `json:"categoryId" yaml:"categoryId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                 // The id of the category the check belongs to. (Required.)
	LevelId              ID              `json:"levelId" yaml:"levelId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                       // The id of the level the check belongs to. (Required.)
	OwnerId              *ID             `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`   // The id of the team that owns the check. (Optional.)
	FilterId             *ID             `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the filter of the check. (Optional.)
	Notes                *string         `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                         // Additional information about the check. (Optional.)
	ToolCategory         ToolCategory    `json:"toolCategory" yaml:"toolCategory" example:"api_documentation"`                           // The category that the tool belongs to. (Required.)
	ToolNamePredicate    *PredicateInput `json:"toolNamePredicate,omitempty" yaml:"toolNamePredicate,omitempty"`                         // The condition that the tool name should satisfy to be evaluated. (Optional.)
	ToolUrlPredicate     *PredicateInput `json:"toolUrlPredicate,omitempty" yaml:"toolUrlPredicate,omitempty"`                           // The condition that the tool url should satisfy to be evaluated. (Optional.)
	EnvironmentPredicate *PredicateInput `json:"environmentPredicate,omitempty" yaml:"environmentPredicate,omitempty"`                   // The condition that the environment should satisfy to be evaluated. (Optional.)
}

// CheckToolUsageUpdateInput specifies the input fields used to update a tool usage check.
type CheckToolUsageUpdateInput struct {
	Name                 *string               `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                // The display name of the check. (Optional.)
	CategoryId           *ID                   `json:"categoryId,omitempty" yaml:"categoryId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the category the check belongs to. (Optional.)
	LevelId              *ID                   `json:"levelId,omitempty" yaml:"levelId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the level the check belongs to. (Optional.)
	OwnerId              *ID                   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of the check. (Optional.)
	FilterId             *ID                   `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`     // The id of the filter the check belongs to. (Optional.)
	Enabled              *bool                 `json:"enabled,omitempty" yaml:"enabled,omitempty" example:"false"`                                 // Whether the check is enabled or not. (Optional.)
	EnableOn             *iso8601.Time         `json:"enableOn,omitempty" yaml:"enableOn,omitempty" example:"2024-01-05T01:00:00.000Z"`            // The date when the check will be automatically enabled. (Optional.)
	Notes                *string               `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`                             // Additional information about the check. (Optional.)
	Id                   ID                    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the check to be updated. (Required.)
	ToolCategory         *ToolCategory         `json:"toolCategory,omitempty" yaml:"toolCategory,omitempty" example:"api_documentation"`           // The category that the tool belongs to. (Optional.)
	ToolNamePredicate    *PredicateUpdateInput `json:"toolNamePredicate,omitempty" yaml:"toolNamePredicate,omitempty"`                             // The condition that the tool name should satisfy to be evaluated. (Optional.)
	ToolUrlPredicate     *PredicateUpdateInput `json:"toolUrlPredicate,omitempty" yaml:"toolUrlPredicate,omitempty"`                               // The condition that the tool url should satisfy to be evaluated. (Optional.)
	EnvironmentPredicate *PredicateUpdateInput `json:"environmentPredicate,omitempty" yaml:"environmentPredicate,omitempty"`                       // The condition that the environment should satisfy to be evaluated. (Optional.)
}

// ChecksCopyToCampaignInput specifies the input fields used to copy selected rubric checks to an existing campaign.
type ChecksCopyToCampaignInput struct {
	CampaignId ID       `json:"campaignId" yaml:"campaignId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                    // The ID of the existing campaign. (Required.)
	CheckIds   []string `json:"checkIds" yaml:"checkIds" example:"['Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk', 'Z2lkOi8vc2VydmljZS85ODc2NTQzMjE']"` // The IDs of the existing rubric checks to be copied. (Required.)
}

// ContactCreateInput specifies the input fields used to create a contact.
type ContactCreateInput struct {
	Type        ContactType `json:"type" yaml:"type" example:"slack"`                                                           // The method of contact [email, slack, slack_handle, web]. (Required.)
	DisplayName *string     `json:"displayName,omitempty" yaml:"displayName,omitempty" example:"example_name"`                  // The name shown in the UI for the contact. (Optional.)
	Address     string      `json:"address" yaml:"address" example:"support@company.com"`                                       // The contact address. Examples: support@company.com for type `email`, https:/opslevel.com for type `web`. (Required.)
	TeamAlias   *string     `json:"teamAlias,omitempty" yaml:"teamAlias,omitempty" example:"example_alias"`                     // The alias of the team the contact belongs to. (Optional.)
	OwnerId     *ID         `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`       // The id of the owner of this contact. (Optional.)
	DisplayType *string     `json:"displayType,omitempty" yaml:"displayType,omitempty" example:"example_type"`                  // The type shown in the UI for the contact. (Optional.)
	ExternalId  *string     `json:"externalId,omitempty" yaml:"externalId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The remote identifier of the contact method. (Optional.)
}

// ContactDeleteInput specifies the input fields used to delete a contact.
type ContactDeleteInput struct {
	Id ID `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The `id` of the contact you wish to delete. (Required.)
}

// ContactInput specifies the input fields used to create a contact.
type ContactInput struct {
	Type        ContactType `json:"type" yaml:"type" example:"slack"`                                          // The method of contact [email, slack, slack_handle, web]. (Required.)
	Address     string      `json:"address" yaml:"address" example:"support@company.com"`                      // The contact address. Examples: support@company.com for type `email`, https:/opslevel.com for type `web`. (Required.)
	DisplayName *string     `json:"displayName,omitempty" yaml:"displayName,omitempty" example:"example_name"` // The name shown in the UI for the contact. (Optional.)
}

// ContactUpdateInput specifies the input fields used to update a contact.
type ContactUpdateInput struct {
	Id          ID           `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The unique identifier for the contact. (Required.)
	Type        *ContactType `json:"type,omitempty" yaml:"type,omitempty" example:"slack"`                                       // The method of contact [email, slack, slack_handle, web]. (Optional.)
	Address     *string      `json:"address,omitempty" yaml:"address,omitempty" example:"support@company.com"`                   // The contact address. Examples: support@company.com for type `email`, https:/opslevel.com for type `web`. (Optional.)
	DisplayName *string      `json:"displayName,omitempty" yaml:"displayName,omitempty" example:"example_name"`                  // The name shown in the UI for the contact. (Optional.)
	DisplayType *string      `json:"displayType,omitempty" yaml:"displayType,omitempty" example:"example_type"`                  // The type shown in the UI for the contact. (Optional.)
	ExternalId  *string      `json:"externalId,omitempty" yaml:"externalId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The remote identifier of the contact method. (Optional.)
	MakeDefault *bool        `json:"makeDefault,omitempty" yaml:"makeDefault,omitempty" example:"false"`                         // Makes the contact the default for the given type. Only available for team contacts. (Optional.)
}

// CustomActionsTriggerDefinitionCreateInput specifies the input fields used in the `customActionsTriggerDefinitionCreate` mutation.
type CustomActionsTriggerDefinitionCreateInput struct {
	Name                   string                                           `json:"name" yaml:"name" example:"example_name"`                                                                                                 // The name of the Trigger Definition. (Required.)
	Description            *string                                          `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`                                                        // The description of what the Trigger Definition will do, supports Markdown. (Optional.)
	OwnerId                ID                                               `json:"ownerId" yaml:"ownerId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                                        // The owner of the Trigger Definition. (Required.)
	ActionId               *ID                                              `json:"actionId,omitempty" yaml:"actionId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                  // The action that will be triggered by the Trigger Definition. (Optional.)
	FilterId               *ID                                              `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                  // The filter that will determine which services apply to the Trigger Definition. (Optional.)
	ManualInputsDefinition *string                                          `json:"manualInputsDefinition,omitempty" yaml:"manualInputsDefinition,omitempty" example:"example_definition"`                                   // The YAML definition of custom inputs for the Trigger Definition. (Optional.)
	Published              *bool                                            `json:"published,omitempty" yaml:"published,omitempty" example:"false"`                                                                          // The published state of the action; true if the definition is ready for use; false if it is a draft. (Optional.)
	AccessControl          *CustomActionsTriggerDefinitionAccessControlEnum `json:"accessControl,omitempty" yaml:"accessControl,omitempty" example:"service_owners"`                                                         // The set of users that should be able to use the trigger definition. (Optional.)
	ResponseTemplate       *string                                          `json:"responseTemplate,omitempty" yaml:"responseTemplate,omitempty" example:"{\"token\": \"XXX\", \"ref\":\"main\", \"action\": \"rollback\"}"` // The liquid template used to parse the response from the External Action. (Optional.)
	EntityType             *CustomActionsEntityTypeEnum                     `json:"entityType,omitempty" yaml:"entityType,omitempty" example:"GLOBAL"`                                                                       // The entity type to associate with the Trigger Definition. (Optional.)
	ExtendedTeamAccess     *[]IdentifierInput                               `json:"extendedTeamAccess,omitempty" yaml:"extendedTeamAccess,omitempty" example:"[]"`                                                           // The set of additional teams who can invoke this Trigger Definition. (Optional.)
}

// CustomActionsTriggerDefinitionUpdateInput specifies the input fields used in the `customActionsTriggerDefinitionUpdate` mutation.
type CustomActionsTriggerDefinitionUpdateInput struct {
	Id                     ID                                               `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                                                  // The ID of the trigger definition. (Required.)
	Name                   *string                                          `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                                                             // The name of the Trigger Definition. (Optional.)
	Description            *string                                          `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`                                                        // The description of what the Trigger Definition will do, support Markdown. (Optional.)
	OwnerId                *ID                                              `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                    // The owner of the Trigger Definition. (Optional.)
	ActionId               *ID                                              `json:"actionId,omitempty" yaml:"actionId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                  // The action that will be triggered by the Trigger Definition. (Optional.)
	FilterId               *ID                                              `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                  // The filter that will determine which services apply to the Trigger Definition. (Optional.)
	Action                 *CustomActionsWebhookActionUpdateInput           `json:"action,omitempty" yaml:"action,omitempty"`                                                                                                // The details for the action to update for the Trigger Definition. (Optional.)
	ManualInputsDefinition *string                                          `json:"manualInputsDefinition,omitempty" yaml:"manualInputsDefinition,omitempty" example:"example_definition"`                                   // The YAML definition of custom inputs for the Trigger Definition. (Optional.)
	Published              *bool                                            `json:"published,omitempty" yaml:"published,omitempty" example:"false"`                                                                          // The published state of the action; true if the definition is ready for use; false if it is a draft. (Optional.)
	AccessControl          *CustomActionsTriggerDefinitionAccessControlEnum `json:"accessControl,omitempty" yaml:"accessControl,omitempty" example:"service_owners"`                                                         // The set of users that should be able to use the trigger definition. (Optional.)
	ResponseTemplate       *string                                          `json:"responseTemplate,omitempty" yaml:"responseTemplate,omitempty" example:"{\"token\": \"XXX\", \"ref\":\"main\", \"action\": \"rollback\"}"` // The liquid template used to parse the response from the External Action. (Optional.)
	EntityType             *CustomActionsEntityTypeEnum                     `json:"entityType,omitempty" yaml:"entityType,omitempty" example:"GLOBAL"`                                                                       // The entity type to associate with the Trigger Definition. (Optional.)
	ExtendedTeamAccess     *[]IdentifierInput                               `json:"extendedTeamAccess,omitempty" yaml:"extendedTeamAccess,omitempty" example:"[]"`                                                           // The set of additional teams who can invoke this Trigger Definition. (Optional.)
}

// CustomActionsWebhookActionCreateInput specifies the input fields used in the `customActionsWebhookActionCreate` mutation.
type CustomActionsWebhookActionCreateInput struct {
	Name           string                      `json:"name" yaml:"name" example:"example_name"`                                                                                                                        // The name that gets assigned to the Webhook Action you're creating. (Required.)
	Description    *string                     `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`                                                                               // The description that gets assigned to the Webhook Action you're creating. (Optional.)
	LiquidTemplate *string                     `json:"liquidTemplate,omitempty" yaml:"liquidTemplate,omitempty" example:"{\"token\": \"XXX\", \"ref\":\"main\", \"action\": \"rollback\"}"`                            // Template that can be used to generate a Webhook payload. (Optional.)
	WebhookUrl     string                      `json:"webhookUrl" yaml:"webhookUrl" example:"john.doe@example.com"`                                                                                                    // The URL that you wish to send the Webhook to when triggered. (Required.)
	HttpMethod     CustomActionsHttpMethodEnum `json:"httpMethod" yaml:"httpMethod" example:"GET"`                                                                                                                     // HTTP used when the Webhook is triggered. Either POST or PUT. (Required.)
	Headers        *JSON                       `json:"headers,omitempty" yaml:"headers,omitempty" example:"{\"name\":\"my-big-query\",\"engine\":\"BigQuery\",\"endpoint\":\"https://google.com\",\"replica\":false}"` // HTTP headers be passed along with your Webhook when triggered. (Optional.)
}

// CustomActionsWebhookActionUpdateInput represents inputs that specify the details of a Webhook Action you wish to update.
type CustomActionsWebhookActionUpdateInput struct {
	Id             ID                           `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                                                                         // The ID of the Webhook Action you wish to update. (Required.)
	Name           *string                      `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                                                                                    // The name that gets assigned to the Webhook Action you're creating. (Optional.)
	Description    *string                      `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`                                                                               // The description that gets assigned to the Webhook Action you're creating. (Optional.)
	LiquidTemplate *string                      `json:"liquidTemplate,omitempty" yaml:"liquidTemplate,omitempty" example:"{\"token\": \"XXX\", \"ref\":\"main\", \"action\": \"rollback\"}"`                            // Template that can be used to generate a Webhook payload. (Optional.)
	WebhookUrl     *string                      `json:"webhookUrl,omitempty" yaml:"webhookUrl,omitempty" example:"john.doe@example.com"`                                                                                // The URL that you wish to send the Webhook too when triggered. (Optional.)
	HttpMethod     *CustomActionsHttpMethodEnum `json:"httpMethod,omitempty" yaml:"httpMethod,omitempty" example:"GET"`                                                                                                 // HTTP used when the Webhook is triggered. Either POST or PUT. (Optional.)
	Headers        *JSON                        `json:"headers,omitempty" yaml:"headers,omitempty" example:"{\"name\":\"my-big-query\",\"engine\":\"BigQuery\",\"endpoint\":\"https://google.com\",\"replica\":false}"` // HTTP headers be passed along with your Webhook when triggered. (Optional.)
}

// DeleteInput specifies the input fields used to delete an entity.
type DeleteInput struct {
	Id ID `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the entity to be deleted. (Required.)
}

// DomainInput specifies the input fields for a domain.
type DomainInput struct {
	Name        *string `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                          // The name for the domain. (Optional.)
	Description *string `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`     // The description for the domain. (Optional.)
	OwnerId     *ID     `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the owner for the domain. (Optional.)
	Note        *string `json:"note,omitempty" yaml:"note,omitempty" example:"example_note"`                          // Additional information about the domain. (Optional.)
}

// ExternalUuidMutationInput specifies the input used for modifying a resource's external UUID.
type ExternalUuidMutationInput struct {
	ResourceId ID `json:"resourceId" yaml:"resourceId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the resource. (Required.)
}

// FilterCreateInput specifies the input fields used to create a filter.
type FilterCreateInput struct {
	Name       string                  `json:"name" yaml:"name" example:"example_name"`                       // The display name of the filter. (Required.)
	Predicates *[]FilterPredicateInput `json:"predicates,omitempty" yaml:"predicates,omitempty" example:"[]"` // The list of predicates used to select which services apply to the filter. (Optional.)
	Connective *ConnectiveEnum         `json:"connective,omitempty" yaml:"connective,omitempty" example:"or"` // The logical operator to be used in conjunction with predicates. (Optional.)
}

// FilterPredicateInput represents a condition that should be satisfied.
type FilterPredicateInput struct {
	Type          PredicateTypeEnum `json:"type" yaml:"type" example:"satisfies_jq_expression"`                     // The condition type used by the predicate. (Required.)
	Value         *string           `json:"value,omitempty" yaml:"value,omitempty" example:"example_value"`         // The condition value used by the predicate. (Optional.)
	Key           PredicateKeyEnum  `json:"key" yaml:"key" example:"filter_id"`                                     // The condition key used by the predicate. (Required.)
	KeyData       *string           `json:"keyData,omitempty" yaml:"keyData,omitempty" example:"example_data"`      // Additional data used by the predicate. This field is used by predicates with key = 'tags' to specify the tag key. For example, to create a predicate for services containing the tag 'db:mysql', set keyData = 'db' and value = 'mysql'. (Optional.)
	CaseSensitive *bool             `json:"caseSensitive,omitempty" yaml:"caseSensitive,omitempty" example:"false"` // . (Optional.)
}

// FilterUpdateInput specifies the input fields used to update a filter.
type FilterUpdateInput struct {
	Id         ID                      `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`        // The id of the filter. (Required.)
	Name       *string                 `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`   // The display name of the filter. (Optional.)
	Predicates *[]FilterPredicateInput `json:"predicates,omitempty" yaml:"predicates,omitempty" example:"[]"` // The list of predicates used to select which services apply to the filter. All existing predicates will be replaced by these predicates. (Optional.)
	Connective *ConnectiveEnum         `json:"connective,omitempty" yaml:"connective,omitempty" example:"or"` // The logical operator to be used in conjunction with predicates. (Optional.)
}

// IdentifierInput specifies the input fields used to identify a resource.
type IdentifierInput struct {
	Id    *ID     `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the resource. (Optional.)
	Alias *string `json:"alias,omitempty" yaml:"alias,omitempty" example:"example_alias"`             // The human-friendly, unique identifier for the resource. (Optional.)
}

// InfrastructureResourceInput specifies the input fields for a infrastructure resource.
type InfrastructureResourceInput struct {
	OwnerId              *ID                                      `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                                                     // The id of the owner for the infrastructure_resource. (Optional.)
	Data                 *JSON                                    `json:"data,omitempty" yaml:"data,omitempty" example:"{\"name\":\"my-big-query\",\"engine\":\"BigQuery\",\"endpoint\":\"https://google.com\",\"replica\":false}"` // The data for the infrastructure_resource. (Optional.)
	Schema               *InfrastructureResourceSchemaInput       `json:"schema,omitempty" yaml:"schema,omitempty"`                                                                                                                 // The schema for the infrastructure_resource that determines its type. (Optional.)
	ProviderData         *InfrastructureResourceProviderDataInput `json:"providerData,omitempty" yaml:"providerData,omitempty"`                                                                                                     // Data about the provider of the infrastructure resource. (Optional.)
	ProviderResourceType *string                                  `json:"providerResourceType,omitempty" yaml:"providerResourceType,omitempty" example:"example_type"`                                                              // The type of the infrastructure resource in its provider. (Optional.)
}

// InfrastructureResourceProviderDataInput specifies the input fields for data about an infrastructure resource's provider.
type InfrastructureResourceProviderDataInput struct {
	AccountName  string  `json:"accountName" yaml:"accountName" example:"example_name"`                             // The account name of the provider. (Required.)
	ExternalUrl  *string `json:"externalUrl,omitempty" yaml:"externalUrl,omitempty" example:"john.doe@example.com"` // The external URL of the infrastructure resource in its provider. (Optional.)
	ProviderName *string `json:"providerName,omitempty" yaml:"providerName,omitempty" example:"example_name"`       // The name of the provider (e.g. AWS, GCP, Azure). (Optional.)
}

// InfrastructureResourceSchemaInput specifies the schema for an infrastructure resource.
type InfrastructureResourceSchemaInput struct {
	Type string `json:"type" yaml:"type" example:"example_type"` // The type of the infrastructure resource. (Required.)
}

// LevelCreateInput specifies the input fields used to create a level. The new level will be added as the highest level (greatest level index).
type LevelCreateInput struct {
	Name        string  `json:"name" yaml:"name" example:"example_name"`                                          // The display name of the level. (Required.)
	Description *string `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"` // The description of the level. (Optional.)
	Index       *int    `json:"index,omitempty" yaml:"index,omitempty" example:"3"`                               // an integer allowing this level to be inserted between others. Must be unique per Rubric. (Optional.)
}

// LevelDeleteInput specifies the input fields used to delete a level.
type LevelDeleteInput struct {
	Id ID `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the level to be deleted. (Required.)
}

// LevelUpdateInput specifies the input fields used to update a level.
type LevelUpdateInput struct {
	Id          ID      `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                           // The id of the level to be updated. (Required.)
	Name        *string `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                      // The display name of the level. (Optional.)
	Description *string `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"` // The description of the level. (Optional.)
}

// ManualCheckFrequencyInput represents defines a frequency for the check update.
type ManualCheckFrequencyInput struct {
	StartingDate       iso8601.Time       `json:"startingDate" yaml:"startingDate" example:"2024-01-05T01:00:00.000Z"` // The date that the check will start to evaluate. (Required.)
	FrequencyTimeScale FrequencyTimeScale `json:"frequencyTimeScale" yaml:"frequencyTimeScale" example:"week"`         // The time scale type for the frequency. (Required.)
	FrequencyValue     int                `json:"frequencyValue" yaml:"frequencyValue" example:"3"`                    // The value to be used together with the frequency scale. (Required.)
}

// ManualCheckFrequencyUpdateInput represents defines a frequency for the check update.
type ManualCheckFrequencyUpdateInput struct {
	StartingDate       *iso8601.Time       `json:"startingDate,omitempty" yaml:"startingDate,omitempty" example:"2024-01-05T01:00:00.000Z"` // The date that the check will start to evaluate. (Optional.)
	FrequencyTimeScale *FrequencyTimeScale `json:"frequencyTimeScale,omitempty" yaml:"frequencyTimeScale,omitempty" example:"week"`         // The time scale type for the frequency. (Optional.)
	FrequencyValue     *int                `json:"frequencyValue,omitempty" yaml:"frequencyValue,omitempty" example:"3"`                    // The value to be used together with the frequency scale. (Optional.)
}

// MemberInput represents input for specifiying members on a group.
type MemberInput struct {
	Email string `json:"email" yaml:"email" example:"first.last@domain.com"` // The user's email. (Required.)
}

// NewRelicIntegrationAccountsInput represents .
type NewRelicIntegrationAccountsInput struct {
	ApiKey  string `json:"apiKey" yaml:"apiKey" example:"XXX_example_key_XXX"`    // The API Key for the New Relic API. (Required.)
	BaseUrl string `json:"baseUrl" yaml:"baseUrl" example:"john.doe@example.com"` // The API URL for New Relic API. (Required.)
}

// NewRelicIntegrationInput represents .
type NewRelicIntegrationInput struct {
	ApiKey  *string `json:"apiKey,omitempty" yaml:"apiKey,omitempty" example:"XXX_example_key_XXX"`    // The API Key for the New Relic API. (Optional.)
	BaseUrl *string `json:"baseUrl,omitempty" yaml:"baseUrl,omitempty" example:"john.doe@example.com"` // The API URL for New Relic API. (Optional.)
}

// PredicateInput represents a condition that should be satisfied.
type PredicateInput struct {
	Type  PredicateTypeEnum `json:"type" yaml:"type" example:"satisfies_jq_expression"`             // The condition type used by the predicate. (Required.)
	Value *string           `json:"value,omitempty" yaml:"value,omitempty" example:"example_value"` // The condition value used by the predicate. (Optional.)
}

// PredicateUpdateInput represents a condition that should be satisfied.
type PredicateUpdateInput struct {
	Type  *PredicateTypeEnum `json:"type,omitempty" yaml:"type,omitempty" example:"satisfies_jq_expression"` // The condition type used by the predicate. (Optional.)
	Value *string            `json:"value,omitempty" yaml:"value,omitempty" example:"example_value"`         // The condition value used by the predicate. (Optional.)
}

// PropertyDefinitionInput represents the input for defining a property.
type PropertyDefinitionInput struct {
	Name                  *string                    `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                           // The name of the property definition. (Optional.)
	Schema                *JSONSchema                `json:"schema,omitempty" yaml:"schema,omitempty" example:""`                                                   // The schema of the property definition. (Optional.)
	Description           *string                    `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`                      // The schema of the property definition. (Optional.)
	PropertyDisplayStatus *PropertyDisplayStatusEnum `json:"propertyDisplayStatus,omitempty" yaml:"propertyDisplayStatus,omitempty" example:"NEW_ENUM_SET_DEFAULT"` // . (Optional.)
}

// PropertyInput represents the input for setting a property.
type PropertyInput struct {
	Owner         IdentifierInput `json:"owner" yaml:"owner"`                                                     // The entity that the property has been assigned to. (Required.)
	Definition    IdentifierInput `json:"definition" yaml:"definition"`                                           // The definition of the property. (Required.)
	Value         JsonString      `json:"value" yaml:"value" example:"example_value"`                             // The value of the property. (Required.)
	RunValidation *bool           `json:"runValidation,omitempty" yaml:"runValidation,omitempty" example:"false"` // Validate the property value against the schema. On by default. (Optional.)
}

// RelationshipDefinition represents a source, target and relationship type specifying a relationship between two resources.
type RelationshipDefinition struct {
	Source IdentifierInput      `json:"source" yaml:"source"`                  // The resource that is the source of the relationship. alias is ambiguous in this context and is not supported. Please supply an id. (Required.)
	Target IdentifierInput      `json:"target" yaml:"target"`                  // The resource that is the target of the relationship. alias is ambiguous in this context and is not supported. Please supply an id. (Required.)
	Type   RelationshipTypeEnum `json:"type" yaml:"type" example:"depends_on"` // The type of the relationship between source and target. (Required.)
}

// RepositoryUpdateInput specifies the input fields used to update a repository.
type RepositoryUpdateInput struct {
	Id      ID    `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                               // The id of the repository to be updated. (Required.)
	Visible *bool `json:"visible,omitempty" yaml:"visible,omitempty" example:"false"`                           // Indicates if the repository is visible. (Optional.)
	OwnerId *ID   `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The team that owns the repository. (Optional.)
}

// ScorecardInput represents input used to create scorecards.
type ScorecardInput struct {
	Name                        string  `json:"name" yaml:"name" example:"example_name"`                                                            // Name of the scorecard. (Required.)
	Description                 *string `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`                   // Description of the scorecard. (Optional.)
	OwnerId                     ID      `json:"ownerId" yaml:"ownerId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                   // Owner of the scorecard. Can currently be a team or a group. (Required.)
	FilterId                    *ID     `json:"filterId,omitempty" yaml:"filterId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`             // Filter used by the scorecard to restrict services. (Optional.)
	AffectsOverallServiceLevels *bool   `json:"affectsOverallServiceLevels,omitempty" yaml:"affectsOverallServiceLevels,omitempty" example:"false"` // . (Optional.)
}

// SecretInput represents arguments for secret operations.
type SecretInput struct {
	Value *string          `json:"value,omitempty" yaml:"value,omitempty" example:"example_value"` // A sensitive value. (Optional.)
	Owner *IdentifierInput `json:"owner,omitempty" yaml:"owner,omitempty"`                         // The owner of this secret. (Optional.)
}

// ServiceCreateInput specifies the input fields used in the `serviceCreate` mutation.
type ServiceCreateInput struct {
	Parent                *IdentifierInput `json:"parent,omitempty" yaml:"parent,omitempty"`                                               // The parent system for the service. (Optional.)
	Name                  string           `json:"name" yaml:"name" example:"example_name"`                                                // The display name of the service. (Required.)
	Product               *string          `json:"product,omitempty" yaml:"product,omitempty" example:"example_product"`                   // A product is an application that your end user interacts with. Multiple services can work together to power a single product. (Optional.)
	Description           *string          `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`       // A brief description of the service. (Optional.)
	Language              *string          `json:"language,omitempty" yaml:"language,omitempty" example:"example_language"`                // The primary programming language that the service is written in. (Optional.)
	Framework             *string          `json:"framework,omitempty" yaml:"framework,omitempty" example:"example_framework"`             // The primary software development framework that the service uses. (Optional.)
	TierAlias             *string          `json:"tierAlias,omitempty" yaml:"tierAlias,omitempty" example:"example_alias"`                 // The software tier that the service belongs to. (Optional.)
	OwnerInput            *IdentifierInput `json:"ownerInput,omitempty" yaml:"ownerInput,omitempty"`                                       // The owner for this service. (Optional.)
	LifecycleAlias        *string          `json:"lifecycleAlias,omitempty" yaml:"lifecycleAlias,omitempty" example:"example_alias"`       // The lifecycle stage of the service. (Optional.)
	SkipAliasesValidation *bool            `json:"skipAliasesValidation,omitempty" yaml:"skipAliasesValidation,omitempty" example:"false"` // Allows for the creation of a service with invalid aliases. (Optional.)
}

// ServiceDeleteInput specifies the input fields used in the `serviceDelete` mutation.
type ServiceDeleteInput struct {
	Id    *ID     `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the service to be deleted. (Optional.)
	Alias *string `json:"alias,omitempty" yaml:"alias,omitempty" example:"example_alias"`             // The alias of the service to be deleted. (Optional.)
}

// ServiceDependencyCreateInput specifies the input fields used for creating a service dependency.
type ServiceDependencyCreateInput struct {
	DependencyKey ServiceDependencyKey `json:"dependencyKey" yaml:"dependencyKey" example:"XXX_example_key_XXX"` // A source, destination pair specifying a dependency between services. (Required.)
	Notes         *string              `json:"notes,omitempty" yaml:"notes,omitempty" example:"example_notes"`   // Notes for service dependency. (Optional.)
}

// ServiceDependencyKey represents a source, destination pair specifying a dependency between services.
type ServiceDependencyKey struct {
	SourceIdentifier      *IdentifierInput `json:"sourceIdentifier,omitempty" yaml:"sourceIdentifier,omitempty"`           // The ID or alias identifier of the service with the dependency. (Optional.)
	DestinationIdentifier *IdentifierInput `json:"destinationIdentifier,omitempty" yaml:"destinationIdentifier,omitempty"` // The ID or alias identifier of the service that is depended upon. (Optional.)
}

// ServiceNoteUpdateInput specifies the input fields used in the `serviceNoteUpdate` mutation.
type ServiceNoteUpdateInput struct {
	Service IdentifierInput `json:"service" yaml:"service"`                                      // The identifier for the service. (Required.)
	Note    *string         `json:"note,omitempty" yaml:"note,omitempty" example:"example_note"` // Note about the service. (Optional.)
}

// ServiceRepositoryCreateInput specifies the input fields used in the `serviceRepositoryCreate` mutation.
type ServiceRepositoryCreateInput struct {
	Service       IdentifierInput `json:"service" yaml:"service"`                                                               // The identifier for the service. (Required.)
	Repository    IdentifierInput `json:"repository" yaml:"repository"`                                                         // The identifier for the repository. (Required.)
	BaseDirectory *string         `json:"baseDirectory,omitempty" yaml:"baseDirectory,omitempty" example:"/home/opslevel.yaml"` // The directory in the repository containing opslevel.yml. (Optional.)
	DisplayName   *string         `json:"displayName,omitempty" yaml:"displayName,omitempty" example:"example_name"`            // The name displayed in the UI for the service repository. (Optional.)
}

// ServiceRepositoryUpdateInput specifies the input fields used to update a service repository.
type ServiceRepositoryUpdateInput struct {
	Id            ID      `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                               // The ID of the service repository to be updated. (Required.)
	BaseDirectory *string `json:"baseDirectory,omitempty" yaml:"baseDirectory,omitempty" example:"/home/opslevel.yaml"` // The directory in the repository containing opslevel.yml. (Optional.)
	DisplayName   *string `json:"displayName,omitempty" yaml:"displayName,omitempty" example:"example_name"`            // The name displayed in the UI for the service repository. (Optional.)
}

// ServiceUpdateInput specifies the input fields used in the `serviceUpdate` mutation.
type ServiceUpdateInput struct {
	Parent                *IdentifierInput `json:"parent,omitempty" yaml:"parent,omitempty"`                                               // The parent system for the service. (Optional.)
	Id                    *ID              `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`             // The id of the service to be updated. (Optional.)
	Alias                 *string          `json:"alias,omitempty" yaml:"alias,omitempty" example:"example_alias"`                         // The alias of the service to be updated. (Optional.)
	Name                  *string          `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                            // The display name of the service. (Optional.)
	Product               *string          `json:"product,omitempty" yaml:"product,omitempty" example:"example_product"`                   // A product is an application that your end user interacts with. Multiple services can work together to power a single product. (Optional.)
	Description           *string          `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`       // A brief description of the service. (Optional.)
	Language              *string          `json:"language,omitempty" yaml:"language,omitempty" example:"example_language"`                // The primary programming language that the service is written in. (Optional.)
	Framework             *string          `json:"framework,omitempty" yaml:"framework,omitempty" example:"example_framework"`             // The primary software development framework that the service uses. (Optional.)
	TierAlias             *string          `json:"tierAlias,omitempty" yaml:"tierAlias,omitempty" example:"example_alias"`                 // The software tier that the service belongs to. (Optional.)
	OwnerInput            *IdentifierInput `json:"ownerInput,omitempty" yaml:"ownerInput,omitempty"`                                       // The owner for the service. (Optional.)
	LifecycleAlias        *string          `json:"lifecycleAlias,omitempty" yaml:"lifecycleAlias,omitempty" example:"example_alias"`       // The lifecycle stage of the service. (Optional.)
	SkipAliasesValidation *bool            `json:"skipAliasesValidation,omitempty" yaml:"skipAliasesValidation,omitempty" example:"false"` // Allows updating a service with invalid aliases. (Optional.)
}

// SystemInput specifies the input fields for a system.
type SystemInput struct {
	Name        *string          `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                          // The name for the system. (Optional.)
	Description *string          `json:"description,omitempty" yaml:"description,omitempty" example:"example_description"`     // The description for the system. (Optional.)
	OwnerId     *ID              `json:"ownerId,omitempty" yaml:"ownerId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the owner for the system. (Optional.)
	Parent      *IdentifierInput `json:"parent,omitempty" yaml:"parent,omitempty"`                                             // The parent domain for the system. (Optional.)
	Note        *string          `json:"note,omitempty" yaml:"note,omitempty" example:"example_note"`                          // Additional information about the system. (Optional.)
}

// TagArgs represents arguments used to query with a certain tag.
type TagArgs struct {
	Key   *string `json:"key,omitempty" yaml:"key,omitempty" example:"XXX_example_key_XXX"` // The key of a tag. (Optional.)
	Value *string `json:"value,omitempty" yaml:"value,omitempty" example:"example_value"`   // The value of a tag. (Optional.)
}

// TagAssignInput specifies the input fields used to assign tags.
type TagAssignInput struct {
	Id    *ID               `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the resource that the tags will be assigned to. (Optional.)
	Alias *string           `json:"alias,omitempty" yaml:"alias,omitempty" example:"example_alias"`             // The alias of the resource that tags will be added to. (Optional.)
	Type  *TaggableResource `json:"type,omitempty" yaml:"type,omitempty" example:"example_type"`                // The type of resource `alias` refers to, if `alias` is provided. (Optional.)
	Tags  []TagInput        `json:"tags" yaml:"tags" example:"[]"`                                              // The desired tags to assign to the resource. (Required.)
}

// TagCreateInput specifies the input fields used to create a tag.
type TagCreateInput struct {
	Id    *ID               `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the resource that this tag will be added to. (Optional.)
	Alias *string           `json:"alias,omitempty" yaml:"alias,omitempty" example:"example_alias"`             // The alias of the resource that this tag will be added to. (Optional.)
	Type  *TaggableResource `json:"type,omitempty" yaml:"type,omitempty" example:"example_type"`                // The type of resource `alias` refers to, if `alias` is provided. (Optional.)
	Key   string            `json:"key" yaml:"key" example:"XXX_example_key_XXX"`                               // The tag's key. (Required.)
	Value string            `json:"value" yaml:"value" example:"example_value"`                                 // The tag's value. (Required.)
}

// TagDeleteInput specifies the input fields used to delete a tag.
type TagDeleteInput struct {
	Id ID `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the tag to be deleted. (Required.)
}

// TagInput specifies the basic input fields used to construct a tag.
type TagInput struct {
	Key   string `json:"key" yaml:"key" example:"XXX_example_key_XXX"` // The tag's key. (Required.)
	Value string `json:"value" yaml:"value" example:"example_value"`   // The tag's value. (Required.)
}

// TagUpdateInput specifies the input fields used to update a tag.
type TagUpdateInput struct {
	Id    ID      `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`           // The id of the tag to be updated. (Required.)
	Key   *string `json:"key,omitempty" yaml:"key,omitempty" example:"XXX_example_key_XXX"` // The tag's key. (Optional.)
	Value *string `json:"value,omitempty" yaml:"value,omitempty" example:"example_value"`   // The tag's value. (Optional.)
}

// TeamCreateInput specifies the input fields used to create a team.
type TeamCreateInput struct {
	Responsibilities *string                    `json:"responsibilities,omitempty" yaml:"responsibilities,omitempty" example:"example description of responsibilities"` // A description of what the team is responsible for. (Optional.)
	Group            *IdentifierInput           `json:"group,omitempty" yaml:"group,omitempty"`                                                                         // The group this team belongs to. (Optional.)
	Members          *[]TeamMembershipUserInput `json:"members,omitempty" yaml:"members,omitempty" example:"[]"`                                                        // A set of emails that identify users in OpsLevel. (Optional.)
	ParentTeam       *IdentifierInput           `json:"parentTeam,omitempty" yaml:"parentTeam,omitempty"`                                                               // The parent team. (Optional.)
	Name             string                     `json:"name" yaml:"name" example:"example_name"`                                                                        // The team's display name. (Required.)
	Contacts         *[]ContactInput            `json:"contacts,omitempty" yaml:"contacts,omitempty" example:"[]"`                                                      // The contacts for the team. (Optional.)
}

// TeamDeleteInput specifies the input fields used to delete a team.
type TeamDeleteInput struct {
	Id    *ID     `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the team to be deleted. (Optional.)
	Alias *string `json:"alias,omitempty" yaml:"alias,omitempty" example:"example_alias"`             // The alias of the team to be deleted. (Optional.)
}

// TeamMembershipCreateInput represents input for adding members to a team.
type TeamMembershipCreateInput struct {
	TeamId  ID                        `json:"teamId" yaml:"teamId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The ID of the team to add members. (Required.)
	Members []TeamMembershipUserInput `json:"members" yaml:"members" example:"[]"`                            // A set of emails that identify users in OpsLevel. (Required.)
}

// TeamMembershipDeleteInput represents input for removing members from a team.
type TeamMembershipDeleteInput struct {
	TeamId  ID                        `json:"teamId" yaml:"teamId" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The ID of the team to remove members from. (Required.)
	Members []TeamMembershipUserInput `json:"members" yaml:"members" example:"[]"`                            // A set of emails that identify users in OpsLevel. (Required.)
}

// TeamMembershipUserInput represents input for specifiying members on a team.
type TeamMembershipUserInput struct {
	User *UserIdentifierInput `json:"user,omitempty" yaml:"user,omitempty"`                        // The email address or ID of the user to add to a team. (Optional.)
	Role *string              `json:"role,omitempty" yaml:"role,omitempty" example:"example_role"` // The type of relationship this membership implies. (Optional.)
}

// TeamUpdateInput specifies the input fields used to update a team.
type TeamUpdateInput struct {
	Responsibilities *string                    `json:"responsibilities,omitempty" yaml:"responsibilities,omitempty" example:"example description of responsibilities"` // A description of what the team is responsible for. (Optional.)
	Group            *IdentifierInput           `json:"group,omitempty" yaml:"group,omitempty"`                                                                         // The group this team belongs to. (Optional.)
	Members          *[]TeamMembershipUserInput `json:"members,omitempty" yaml:"members,omitempty" example:"[]"`                                                        // A set of emails that identify users in OpsLevel. (Optional.)
	ParentTeam       *IdentifierInput           `json:"parentTeam,omitempty" yaml:"parentTeam,omitempty"`                                                               // The parent team. (Optional.)
	Id               *ID                        `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                     // The id of the team to be updated. (Optional.)
	Alias            *string                    `json:"alias,omitempty" yaml:"alias,omitempty" example:"example_alias"`                                                 // The alias of the team to be updated. (Optional.)
	Name             *string                    `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                                                    // The team's display name. (Optional.)
}

// ToolCreateInput specifies the input fields used to create a tool.
type ToolCreateInput struct {
	Category     ToolCategory `json:"category" yaml:"category" example:"api_documentation"`                                          // The category that the tool belongs to. (Required.)
	DisplayName  string       `json:"displayName" yaml:"displayName" example:"example_name"`                                         // The display name of the tool. (Required.)
	Url          string       `json:"url" yaml:"url" example:"john.doe@example.com"`                                                 // The URL of the tool. (Required.)
	Environment  *string      `json:"environment,omitempty" yaml:"environment,omitempty" example:"environment that tool belongs to"` // The environment that the tool belongs to. (Optional.)
	ServiceId    *ID          `json:"serviceId,omitempty" yaml:"serviceId,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`      // The id of the service the tool will be assigned to. (Optional.)
	ServiceAlias *string      `json:"serviceAlias,omitempty" yaml:"serviceAlias,omitempty" example:"example_alias"`                  // The alias of the service the tool will be assigned to. (Optional.)
}

// ToolDeleteInput specifies the input fields used to delete a tool.
type ToolDeleteInput struct {
	Id ID `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The id of the tool to be deleted. (Required.)
}

// ToolUpdateInput specifies the input fields used to update a tool.
type ToolUpdateInput struct {
	Id          ID            `json:"id" yaml:"id" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"`                                        // The id of the tool to be updated. (Required.)
	Category    *ToolCategory `json:"category,omitempty" yaml:"category,omitempty" example:"api_documentation"`                      // The category that the tool belongs to. (Optional.)
	DisplayName *string       `json:"displayName,omitempty" yaml:"displayName,omitempty" example:"example_name"`                     // The display name of the tool. (Optional.)
	Url         *string       `json:"url,omitempty" yaml:"url,omitempty" example:"john.doe@example.com"`                             // The URL of the tool. (Optional.)
	Environment *string       `json:"environment,omitempty" yaml:"environment,omitempty" example:"environment that tool belongs to"` // The environment that the tool belongs to. (Optional.)
}

// UserIdentifierInput specifies the input fields used to identify a user. Exactly one field should be provided.
type UserIdentifierInput struct {
	Id    *ID     `json:"id,omitempty" yaml:"id,omitempty" example:"Z2lkOi8vc2VydmljZS8xMjM0NTY3ODk"` // The ID of the user. (Optional.)
	Email *string `json:"email,omitempty" yaml:"email,omitempty" example:"first.last@domain.com"`     // The email address of the user. (Optional.)
}

// UserInput specifies the input fields used to create and update a user.
type UserInput struct {
	Name             *string   `json:"name,omitempty" yaml:"name,omitempty" example:"example_name"`                  // The name of the user. (Optional.)
	Role             *UserRole `json:"role,omitempty" yaml:"role,omitempty" example:"admin"`                         // The access role (e.g. user vs admin) of the user. (Optional.)
	SkipWelcomeEmail *bool     `json:"skipWelcomeEmail,omitempty" yaml:"skipWelcomeEmail,omitempty" example:"false"` // Don't send an email welcoming the user to OpsLevel. (Optional.)
}

// UsersFilterInput represents the input for filtering users.
type UsersFilterInput struct {
	Key  UsersFilterEnum `json:"key" yaml:"key" example:"last_sign_in_at"`                      // Field to be filtered. (Required.)
	Arg  *string         `json:"arg,omitempty" yaml:"arg,omitempty" example:"example_arg"`      // Value to be filtered. (Optional.)
	Type *BasicTypeEnum  `json:"type,omitempty" yaml:"type,omitempty" example:"does_not_equal"` // The operation applied to value on the field. (Optional.)
}
