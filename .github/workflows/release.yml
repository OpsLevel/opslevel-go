name: "Release"

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch All Tags
        run: git fetch --force --tags
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: Set Release Version
        id: version
        run: |
          echo "::set-output name=RELEASE_VERSION::$(date +v%Y.%-m.%-d)"
      - name: Set Package Version
        run: |
          cat << EOF > version.go
          package opslevel
  
          const clientVersion = "${{ steps.version.outputs.RELEASE_VERSION }}"
          EOF
      - name: Ensure Changelog
        run: |
          git config user.name "OpsLevel Bots"
          git config user.email "bots@opslevel.com"
          if test -f ./.changes/${{ github.event.inputs.release-version }}.md
          then
            echo "Skip Changie..."
          else
            go install github.com/miniscruff/changie@latest
            changie batch ${{ github.event.inputs.release-version }}
            changie merge
            git add .
            git commit -m "Cut Release '${{ github.event.inputs.release-version }}'"
            git push origin HEAD
          fi
          git tag -f ${{ github.event.inputs.release-version }} -m "Cut Release '${{ github.event.inputs.release-version }}'"
          git push -f origin refs/tags/${{ github.event.inputs.release-version }}
      - name: Ensure Release Does Not Exist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete ${{ steps.version.outputs.RELEASE_VERSION }} || true
      - name: Import GPG Key
        id: import_gpg
        uses: hashicorp/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2.7.0
        with:
          args: release --rm-dist --release-notes=./changes/${{ steps.version.outputs.RELEASE_VERSION }}.md
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Report Release To OpsLevel
        uses: opslevel/report-deploy-github-action@v0.2.0
        with:
          integration_url: ${{ secrets.DEPLOY_INTEGRATION_URL }}
          service: "opslevel_api_clients"
