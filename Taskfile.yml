# https://taskfile.dev/

version: '3'

tasks:
  ci:
    desc: Workflow to run in CI
    deps: [setup]
    cmds:
      - task: lint
      - task: test

  generate:
    desc: Generate code based on PUBLIC GraphQL Interface
    aliases: [gen]
    cmds:
      - "[ -f schema.graphql ] || curl https://app.opslevel.com/public/schemas/schema.graphql > schema.graphql"
      - defer: rm schema.graphql
      - go generate
      - gofumpt -w .

  generate-internal:
    desc: Generate code based on INTERNAL internal GraphQL Interface
    aliases: [gen-internal]
    env:
      GRAPHQL_VISIBILITY: "internal"
    cmds:
      - go generate
      - gofumpt -w .

  lint:
    desc: Formatting and linting
    cmds:
      - test -z "$(gofumpt -d -e . | tee /dev/stderr)"
      - golangci-lint run
      - nilaway -test=false -include-pkgs='github.com/opslevel/opslevel-go' ./...

  fix:
    desc: Fix formatting and linting
    cmds:
      - gofumpt -w .
      - go mod tidy
      - golangci-lint run --fix
      - nilaway -fix -test=false -include-pkgs='github.com/opslevel/opslevel-go' ./...

  setup:
    desc: Setup linter, formatter, etc. for local testing and CI
    cmds:
      - task: install-go-tool
        vars: { GO_TOOL: "gofumpt", GO_TOOL_PATH: "mvdan.cc/gofumpt@latest" }
      - task: install-go-tool
        vars: { GO_TOOL: "golangci-lint", GO_TOOL_PATH: "github.com/golangci/golangci-lint/cmd/golangci-lint@v1.60.1" }
      - task: install-go-tool
        vars: { GO_TOOL: "nilaway", GO_TOOL_PATH: "go.uber.org/nilaway/cmd/nilaway@latest" }

  test:
    desc: Run tests
    cmds:
      - go test -race -coverprofile=coverage.out -covermode=atomic -v ./... {{ .CLI_ARGS }}
      - grep -v "/enum.go" coverage.out > coverage.txt
    silent: true

  # internal (not directly called) tasks

  install-go-tool:
    internal: true
    silent: true
    vars:
      IS_TOOL_INSTALLED:
        sh: which {{.GO_TOOL}} > /dev/null || echo "1"
    cmds:
      - test -z "{{.IS_TOOL_INSTALLED}}" || echo "Installing {{.GO_TOOL}}..."
      - test -z "{{.IS_TOOL_INSTALLED}}" || go install {{.GO_TOOL_PATH}}
      - test -n $(go env GOBIN) || go env -w GOBIN=$(go env GOPATH)/bin
      - echo "  '{{.GO_TOOL}}' is installed."
    requires:
      vars: [GO_TOOL, GO_TOOL_PATH]
